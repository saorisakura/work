C语言的标准输入输出函数学习总结

I/O对于编程是必不可少的，程序的运行既需要有数据的输入，也需要有相应结果的输出，这是程序的基本。

学习C语言首先接触的两个I/O函数：printf（char*，...）和scanf（char*，...）

printf 它的返回值为它输出字符的个数，如printf（“Hello Word！”）的返回值为11

它通过转换说明符来实现参数的值的输出 如prinf（"%d",i）;输出了整数i的值，%d是转换说明，参数i应为整数。

%a （%A）：浮点数，十六进制的p-计数法（就是将数化为十六进制数例如 0xa.1c p10=(10+1*(1/16)+12*(1/256))*(2的10次方）类似于二进制的e计数（经测试输出的一定为0x1.xxxxxpy的形式，应该是某种规定类似于规格化数。）

%c ：输出一个字符

%d （%i）：输出一个有符号整型（int）

%e（%E）：浮点数，e计数法（小数点之前的一位不小于1（数值零除外））

%f ：浮点数，十进制计数法（不进行小数点的移动，即没有后面的基数次幂）

%g（%G）：根据数值不同自动选择%f或%e。（%e在指数小于-4时或者大于等于精度时使用，且不显示后面多余的0如0.007000为单精度浮点数精度为6-7位，输出时输出0.007） 

%u ：输出无符号整型（unsigned int）

%o ：输出无符号八进制数

%p ：指针

%s ：字符串

%x（%X）使用十六进制的无符号十六进制整数

%% ：打印一个%

对转于换说明符，还有相应的修饰符

-    ：表示左对齐（默认为右对齐），比如对于 int i=-1   printf（“%5d"，i);意思是最短长度应为5个字符，否则在其左侧添加空格以补足,输出为   -1；距离左边界有5个字符。而%-5d则是输出为-1，进行左对齐；

+   ：表示显示数的符号，正数添加+，负数添加-

（空格）：表示正数带前导空格，但是不显示符号，负数用-号覆盖空格

#     : 若转换说明符为%o则加上前导0，若为%x（%X）则加上前导0x，若为浮点数它保证即使没有数字也会打印一个小数点，若转换说明符为%g（%G）则保证尾随零不会被删去.例如上例中 0.007000 在 %g 说明符下输出 0.007 而在 %#g 说明符下输出0.007000

0     ：用前导0而不是空格去填充字符宽度

digit（说明符前加上数字） ：指定整个字段的最小宽度，不足则以空格填充

.digit（说明符前加上.数字）：对于%e，%f是要打印的小数点右边的位数。对于%g是有效数字的最大位数。对于%s，是打印字符的最大位数。对于整数，是打印数字的最小位数。不足则以前导0来填充.例如 float l=1.1111,m=1.1111;printf("%.5f，%.5g",l,m);输出结果为 1.11110 ，1.1111；前者小数点后面位数要为5位不足以0填充，后者最大有效位数要为5位，不足则正常输出，超出则从尾端开始截断，对于%.（n）g和%.（n）s作用是一样的。对于%.(n)d则是整数的最小有效位数不足以0填充。如

int i=111；printf("%.4d",i);输出结果为0111;

h  :和整数说明符使用，转换为短整型输出

hh：和整数说明符使用，转换为char型输出；事实上是只输出最后一个字节的值。

l    ：和整数说明符使用，转换为长整型输出；

ll    ：和整数说明符使用，转换为long long int 输出；（这里使用的应该是符号扩展！）

还有（t ：表示两个指针之差类型 ptrdiff_t ；z：表示sizeof的返回值size_t类型  均为C99的新增部分，（只是照书上的写下来对此也不是很了解！O__O "…））

还有一个特殊的修饰符* 

它的用法如下： printf("%*.*f",width,n,digit）；

width和digit均为整型变量，n为float类型，若width==5，digit=2，则上述输出结果等价为printf("%5.2f",n);

也就是说字段宽度可以由程序来指定而不用事先指定好。

scanf（char*,...）是一个和printf（char*,...）相配对的函数，不是说使用scanf就必须使用printf，而是两者在使用方法上是极为类似的；均是通过转换说明符来解释输入和输出。因此两者具有相同的转换说明符。不过修饰符的用法，会有所差异，因为一个是输入函数，一个是输出函数。

scanf的工作原理实际上是通过逐个读取字符，然后再通过转换说明符，计算值并赋予变量。

例如：int i；scanf（“%3d”，&i（需要提供地址才能修改变量的值，&为地址运算符））；若你在键盘键入12345，则读入的字符只有'1' '2' '3'，经过计算之后将值123赋给变量i；读取方式为从第一个非空字符读入，若读取的第一个为+，-或数字则继续读取下一个字符，在遇到换行或空格时、达到所指定的最大位数、字符不为数字这三个条件任一一个发生时都会停止读取（即完成一次读取）；若首个遇到的字符不为上述所列出的字符，则输入停止，并不赋给变量任何值。下次读取仍从上次停止的地方读入，而不会跳过。

float f; scanf("%e"，&f）;表明输入可以识别e表示法，同理scanf("%f",&f）; scanf("%a",&f); scanf("%o",&f); scanf("%x",&f);分别表示可以识别十进制表示法，p进制表示法，八进制表示法，十六进制表示法。

char* l; scanf（"%（n）s",l）;表示读入一串长度为n的字符串，从第一个非空字符读入，到第n个字符或是遇到空格和换行时停止输入，并会在字符串后添加'\0'（c字符串结尾标志）

.char c; scanf("%c",&c);读入一个字符，因此不会跳过空格。

scanf的返回值为它所成功读入的次数（读入表示一次完整读入）当发生读入错误时，若有多个转换说明符，会在第一个出错的地方停止读入并结束。

*对于scanf中的转换说明符是一个非常有用的修饰符。

例如可以通过如下语句来防止scanf函数的读入提留在一个地方不动。

假设我们要连续读入多个整数。但是若键入了字母字符则会使得scanf函数一直停留在首次碰到的字母的位置。但是通过以下语句

while(i>0)//以i<=0做为跳出条件

{   

if(!scanf("%d",&i))  scanf("%*s");

fp(fp,"% d",i)；

}

scanf("%*s");的作用就是跳过一个字符串，它在读入阶段和读入一个字符串的工作相同，但是并不将其赋予任何变量而是将其丢弃。

因为printf和scanf的功能很多，所以相比较下面学的输入输出函数要来的复杂些。

字符输入输出函数

1、char getchar(void) 从标准输入中（stdin（一般c程序会自动打开键盘文件，将其视作为标准输入））读入一个字符并将其返回； int putchar(char) 向标准输出中（stdout（一般c程序会自动打开显示器文件，将其视作标准输出））输出一个字符并返回其值（int 类型）；一个实例：

#include<stdio.h>

void main()

{

char ch;

while((ch=getchar())!='\n')    printf(",%d",putchar(ch));//结果输出字符的ASCLL和字符

}

2，char getc（FILE*fp）是从文件指针所指文件处获取字符ch=getc(stdin);和ch=getchar();是等价的；

     int putc(char ch,FILE*fp)是向文件指针所指文件输出字符 putc(ch,stdout)和putchar(ch);是等价的；

行输入输出函数

1，int puts（char*）;向标准输出输出字符串，若成功则返回0.若输出文件结尾或出错则返回其他值；puts除了输出char*所指的字符串外还会额外的输出一个换行符。即在字符串结尾后会换行。

    char* gets（char*）:从标准输入中获取字符串，并返回存储的位置，当其遇到文件末尾或出错时返回空指针NULL。gets从第一个非空字符读入直到遇到换行符结束读入，但是并不读入换行符。即gets读取一行字符，并在其末尾添加‘\0'；

2，int fputs(char* ch,FILE* fp):将字符串输出到文件指针fp所指文件的位置指针所指的位置处。成功则返回0，遇到文件结尾则返回EOF（-1）；不会添加换行输出；

     char* fgets(char*ch,int n,FILE*fp);n为所能读取的最大长度（包括'\0'），从文件位置指针开始读入，直到遇见换行或者达到最大长度-1，停止读入，并在字符串结尾添加'\0';不像gets函数，fgets会读取所遇到的'\n'并存入，而不是像gets那样丢弃。

3、int fprintf(FILE*fp,char*,...)用法和printf是一样的，只是多了一个参数FILE*用于进行输出重定向。

     int fscanf(FILE*fp,char*,...)用法和scanf是一样的，只是多了一个参数FILE*用于进行输入重定向。

     int sprintf(char*,char*,...)用法和printf是一样的，只是输出到字符指针所指的位置。

块输入输出函数

size_t fwrite(const void*,size_t,int,FILE*)   第一个参数为泛型指针，亦即它接受任何指针类型的实参。为什么要用泛型指针，因为我们并不能确定写入文件的数据类型，有可能是一个整型、也可能是一个结构。第二个参数为所写入数据类型的大小（以字节为单位）。第三个参数为所写入数据的个数。第四个参数为所要写入的文件的指针。最终返回写入数据的个数，当写入过程出错或者遇到文件结尾，返回的值可能会小于第三个参数的值。

size-t fread(void*,size_t,int,FILE*)     第一个为地址要读入数据的地址，第二个参数为数据类型的大小，第三个参数为要写入的数据个数，第四个参数为输入的文件的指针。

这俩个函数特别适用于以二进制模式打开的文件的读写操作，因为原有数据所占的大小，在输入输出前后是不变的。
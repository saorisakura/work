指针函数与函数指针的区别
 
在学习arm过程中发现这“指针函数”与“函数指针”容易搞错，最简单的辨别方式就是看函数名前面的指针*号有没有被括号（）包含，如果被包含就是函数指针，反之则是指针函数。

今天我们从头把它搞清楚

 

首先它们之间的定义：

 

1、指针函数是指带指针的函数，即本质是一个函数，函数返回类型是某一类型的指针。

类型标识符 *函数名(参数表)

int *f(x，y);
首先它是一个函数，只不过这个函数的返回值是一个地址值。函数返回值必须用同类型的指针变量来接受，也就是说，指针函数一定有函数返回值，而且，在主调函数中，函数返回值必须赋给同类型的指针变量。

表示：

float *fun();
float *p;
p = fun(a);
 

来讲详细一些吧！请看下面

注意指针函数与函数指针表示方法的不同，千万不要混淆。

 

指针函数：
当一个函数声明其返回值为一个指针时，实际上就是返回一个地址给调用函数，以用于需要指针或地址的表达式中。
格式：
类型说明符 * 函数名(参数)
当然了，由于返回的是一个地址，所以类型说明符一般都是int。
例如：

int *GetDate();
int * aaa(int,int);
 

函数返回的是一个地址值，经常使用在返回数组的某一元素地址上。
复制代码
 1 int * GetDate(int wk,int dy);
 2 main()
 3 {
 4 　　int wk,dy;
 5 　　do{
 6 　　printf(Enter week(1-5)day(1-7)\n);
 7 　　scanf(%d%d,&wk,&dy);
 8 　　}
 9 　　while(wk<1||wk>5||dy<1||dy>7);
10 　　printf(%d\n,*GetDate(wk,dy));
11 }
12 
13 int * GetDate(int wk,int dy)
14 {
15 　　static int calendar[5][7]=
16 　　{
17 　　　　{1,2,3,4,5,6,7},
18 　　　　{8,9,10,11,12,13,14},
19 　　　　{15,16,17,18,19,20,21},
20 　　　　{22,23,24,25,26,27,28},
21 　　　　{29,30,31,-1}
22 　　};
23 　　return &calendar[wk-1][dy-1];
24 }
复制代码
程序应该是很好理解的，子函数返回的是数组某元素的地址。输出的是这个地址里的值。

 

 

2、函数指针是指向函数的指针变量，即本质是一个指针变量。

    int (*f) (int x); /*声明一个函数指针 */

　  f=func; /* 将func函数的首地址赋给指针f */
指向函数的指针包含了函数的地址的入口地址，可以通过它来调用函数。声明格式如下：
类型说明符 (*函数名)   (参数)
其实这里不能称为函数名，应该叫做指针的变量名。这个特殊的指针指向一个返回整型值的函数。指针的声明笔削和它指向函数的声明保持一致。
指针名和指针运算符外面的括号改变了默认的运算符优先级。如果没有圆括号，就变成了一个返回整型指针的函数的原型声明。
例如：

void (*fptr)();
把函数的地址赋值给函数指针，可以采用下面两种形式：

fptr=&Function;
fptr=Function;
取地址运算符&不是必需的，因为单单一个函数标识符就标号表示了它的地址，如果是函数调用，还必须包含一个圆括号括起来的参数表。
可以采用如下两种方式来通过指针调用函数：

x=(*fptr)();
x=fptr();
第二种格式看上去和函数调用无异。但是有些程序员倾向于使用第一种格式，因为它明确指出是通过指针而非函数名来调用函数的。

下面举一个例子：

复制代码
 1 void (*funcp)();
 2 void FileFunc(),EditFunc();
 3 
 4 main()
 5 {
 6 　　funcp=FileFunc;
 7 　　(*funcp)();
 8 　　funcp=EditFunc;
 9 　　(*funcp)();
10 }
11 
12 void FileFunc()
13 {
14 　　printf(FileFunc\n);
15 }
16 
17 void EditFunc()
18 {
19 　　printf(EditFunc\n);
20 }
复制代码
 

程序输出为：

FileFunc
EditFunc
 

主要的区别是一个是指针变量，一个是函数。在使用是必要要搞清楚才能正确使用

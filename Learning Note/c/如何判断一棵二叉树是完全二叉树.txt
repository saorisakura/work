如何判断一棵二叉树是完全二叉树


严蔚敏那本教材上的说法：一个深度为k，节点个数为 2^k - 1 的二叉树为满二叉树。这个概念很好理解，

就是一棵树，深度为k，并且没有空位。

首先对满二叉树按照广度优先遍历（从左到右）的顺序进行编号。

一颗深度为k二叉树，有n个节点，然后，也对这棵树进行编号，如果所有的编号都和满二叉树对应，那么这棵树是完全二叉树。

任意的一个二叉树，都可以补成一个满二叉树。这样中间就会有很多空洞。在广度优先遍历的时候，如果是满二叉树，或者完全二叉树，这些空洞是在广度优先的遍历的末尾，所以，但我们遍历到空洞的时候，整个二叉树就已经遍历完成了。而如果，是非完全二叉树，

我们遍历到空洞的时候，就会发现，空洞后面还有没有遍历到的值。这样，只要根据是否遍历到空洞，整个树的遍历是否结束来判断是否是完全的二叉树。

算法如下：

[cpp] view plain copy
bool is_complete(tree *root)  
{  
    queue q;  
    tree *ptr;  
    // 进行广度优先遍历（层次遍历），并把NULL节点也放入队列  
    q.push(root);  
    while ((ptr = q.pop()) != NULL)  # 需要改进
    {  
        q.push(ptr->left);  
        q.push(ptr->right);  
    }  
  
    // 判断是否还有未被访问到的节点  
    while (!q.is_empty())  
    {  
        ptr = q.pop();  
          
        // 有未访问到的的非NULL节点，则树存在空洞，为非完全二叉树  
        if (NULL != ptr)  
        {  
            return false;  
        }  
    }  
  
    return true;  
}  

上面的答案有问题
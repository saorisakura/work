总结一下__declspec(dllimport)的作用
      是时候总结一下__declspec(dllimport)的作用了。可能有人会问：__declspec(dllimport)和__declspec(dllexport)是一对的，在动态链接库中__declspec(dllexport)管导出，__declspec(dllimport)管导出，就像一个国家一样，有出口也有进口，有什么难理解的呢？这是一种很自然的思路，开始我也是这样理解。



     但是在两年前的一个项目中，我发现不用__declspec(dllimport)似乎也可以。比如现在我新建一个使用共享MFC DLL的规则DLL工程：DllDlg。然后我新建两个文件：DllApi.h和DllApi.cpp。DllApi.h作为接口文 件，DllApi.cpp作为实现文件。



     接着在DllApi.h声明一个函数：


__declspec(dllexport) void HelloWorld();



在DllApi.cpp写这个函数的实现：




void HelloWorld()
{
    AfxMessageBox(_T("HelloWorld"));
}




        这样外部的应用程序或dll就能调用HelloWorld函数。这里要特别提醒的是：有些网友说要把DllApi.h中的__declspec(dllexport) void HelloWorld();改为__declspec(dllimport) void HelloWorld();才能提供给外部调用，实际上这并不需要，这个我已经测试过。从那时我就产生一个疑问：照这样，像类似下面的：




#ifdef _EXPORTING
#define API_DECLSPEC    __declspec(dllexport)
#else
#define API_DECLSPEC    __declspec(dllimport)
#endif


      是不是就只剩下一种作用：让外部调用者看得更自然些，知道哪些接口是自己工程需要导入的？__declspec(dllimport)是不是一点实际作用都没有呢？这个疑问一直盘旋在我的脑海。直到最近，我在CSDN论坛上发了一个帖子：



__declspec(dllimport) 的作用到底在哪里呢？ 

总结了各位大虾的发言，特得出如下结论： 
1.	在导入动态链接库中的全局变量方面起作用：
使用类似


#ifdef _EXPORTING
#define API_DECLSPEC    __declspec(dllexport)
#else
#define API_DECLSPEC    __declspec(dllimport)
#endif




可以更好地导出dll中的全局变量，比如按照的宏，可以在dll中这样导出全局变量：




API_DECLSPEC CBtt g_Btt;



然后在调用程序这样导入：




API_DECLSPEC CBtt g_Btt;



当然也可以使用extern关键字，比如在dll中这样导出全局变量：




CBtt g_Btt;



然后在调用程序这样导入：




extern CBtt g_Btt;


但据说使用__declspec(dllimport)更有效。



2.	__declspec(dllimport)的作用主要体现在导出类的静态成员方面，
比如在动态链接库中定义这样一个导出类：




class __declspec(dllexport) CBtt
{
public:
	CBtt(void);
	~CBtt(void);
public:
    CString m_str;
	static int GetValue()
	{
		return m_nValue;
	}
private:
	static int m_nValue;
};




照上面这样声明，外部虽然可以使用CBtt类，但不能使用CBtt类的GetValue函数，一使用就会出现无法解析的外部符号 "public: static int CBtt::m_nValue" (?m_nValue@CBtt@@2HA)。只有如下声明才能使用CBtt类的GetValue函数：




#ifdef _EXPORTING
#define API_DECLSPEC    __declspec(dllexport)
#else
#define API_DECLSPEC    __declspec(dllimport)
#endif
class API_DECLSPEC CBtt
{
public:
	CBtt(void);
	~CBtt(void);
public:
	CString m_str;
	static int GetValue()
	{
		return m_nValue;
	}
private:
	static int m_nValue;
};




3.	使用隐式使用dll时，不加__declspec(dllimport)完全可以，使用上没什么区别，只是在生成的二进制代码上稍微有点效率损失。



a、 不加__declspec(dllimport)时，在使用dll中的函数时，编译器并不能区别这是个普通函数，还是从其它dll里导入的函数，所以其生 成的代码如下：

call 地址1

地址1：
jmp 实际函数地址



b、有 __declspec(dllimport)时，编译器知道这是要从外部dll导入的函数，从而在生成的exe的输入表里留有该项，以便在运行 exe，PE载入器加载exe时对输入地址表IAT进行填写，这样生成的代码如下：

call dword ptr[输入表里哪项对应的内存地址] (注意：现在就不需要jmp stub了)。这里
有兴趣的朋友可以参看《编译原理》和 PE文件格式。



4．使用__declspec(dllimport)体现了语言的一种对称美，比如虽然!true就是表示false，但是我们还是需要false这个关键字，这里体现了一种对称美。

在此特别感谢CSDN的众位大侠：superdiablo、wltg2001、ccpaishi、jszj、WizardK、hurryboylqs、jingzhongrong、jameshooo、glacier3d、winnuke、starnight1981、laiyiling、yang79tao、ForestDB、zhouzhipen、lxlsymbome、Beyond_cn。



参考文献：



1. __declspec(dllimport) 到底有什么用？ 


__declspec(dllimport)

我相信写WIN32程序的人，做过DLL，都会很清楚__declspec(dllexport)的作用，它就是为了省掉在DEF文件中手工定义导出哪些函数的一个方法。当然，如果你的DLL里全是C++的类的话，你无法在DEF里指定导出的函数，只能用__declspec(dllexport)导出类。但是，MSDN文档里面，对于__declspec(dllimport)的说明让人感觉有点奇怪，先来看看MSDN里面是怎么说的：

不使用 __declspec(dllimport) 也能正确编译代码，但使用 __declspec(dllimport) 使编译器可以生成更好的代码。编译器之所以能够生成更好的代码，是因为它可以确定函数是否存在于 DLL 中，这使得编译器可以生成跳过间接寻址级别的代码，而这些代码通常会出现在跨 DLL 边界的函数调用中。但是，必须使用 __declspec(dllimport) 才能导入 DLL 中使用的变量。

初看起来，这段话前面的意思是，不用它也可以正常使用DLL的导出库，但最后一句话又说，必须使用 __declspec(dllimport) 才能导入 DLL 中使用的变量这个是什么意思？？

那我就来试验一下，假定，你在DLL里只导出一个简单的类，注意，我假定你已经在项目属性中定义了 SIMPLEDLL_EXPORT
SimpleDLLClass.h

#ifdef SIMPLEDLL_EXPORT
#define DLL_EXPORT __declspec(dllexport)
#else
#define DLL_EXPORT
#endif

class DLL_EXPORT SimpleDLLClass
{
public:
 SimpleDLLClass();
 virtual ~SimpleDLLClass();

 virtual getValue() { return m_nValue;};
private:
 int m_nValue;
};
SimpleDLLClass.cpp

#include "SimpleDLLClass.h"

SimpleDLLClass::SimpleDLLClass()
{
 m_nValue=0;
}

SimpleDLLClass::~SimpleDLLClass()
{
}
然后你再使用这个DLL类，在你的APP中include SimpleDLLClass.h时，你的APP的项目不用定义 SIMPLEDLL_EXPORT 所以，DLL_EXPORT 就不会存在了，这个时候，你在APP中，不会遇到问题。这正好对应MSDN上说的__declspec(dllimport)定义与否都可以正常使用。但我们也没有遇到变量不能正常使用呀。 那好，我们改一下SimpleDLLClass,把它的m_nValue改成static,然后在cpp文件中加一行

int SimpleDLLClass::m_nValue=0;
如果你不知道为什么要加这一行，那就回去看看C++的基础。 改完之后，再去LINK一下，你的APP，看结果如何， 结果是LINK告诉你找不到这个m_nValue。明明已经定义了，为什么又没有了？？ 肯定是因为我把m_nValue定义为static的原因。但如果我一定要使用Singleton的Design Pattern的话，那这个类肯定是要有一个静态成员，每次LINK都没有，那不是完了？ 如果你有Platform SDK，用里面的Depend程序看一下，DLL中又的确是有这个m_nValue导出的呀。
再回去看看我引用MSDN的那段话的最后一句。 那我们再改一下SimpleDLLClass.h，把那段改成下面的样子:

#ifdef SIMPLEDLL_EXPORT
#define DLL_EXPORT __declspec(dllexport)
#else
#define DLL_EXPORT __declspec(dllimport)
#endif
再LINK，一切正常。原来dllimport是为了更好的处理类中的静态成员变量的，如果没有静态成员变量，那么这个__declspec(dllimport)无所谓。
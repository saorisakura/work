1、字符数组的定义与初始化
字符数组的初始化，最容易理解的方式就是逐个字符赋给数组中各元素。
char str[10]={ 'I',' ','a','m',' ',‘h','a','p','p','y'};
即把10个字符分别赋给str[0]到str[9]10个元素
如果花括号中提供的字符个数大于数组长度，则按语法错误处理；若小于数组长度，则只将这些字符数组中前面那些元素，其余的元素自动定为空字符（即 '\0' )。

2、字符数组与字符串
在c语言中，将字符串作为字符数组来处理。（c++中不是）
在实际应用中人们关心的是有效字符串的长度而不是字符数组的长度，例如，定义一个字符数组长度为100，而实际有效字符只有40个，为了测定字符串的实际长度，C语言规定了一个“字符串结束标志”，以字符'\0'代表。如果有一个字符串，其中第10个字符为'\0'，则此字符串的有效字符为9个。也就是说，在遇到第一个字符'\0'时，表示字符串结束，由它前面的字符组成字符串。
系统对字符串常量也自动加一个'\0'作为结束符。例如"C Program”共有9个字符，但在内存中占10个字节，最后一个字节'\0'是系统自动加上的。（通过sizeof()函数可验证）
有了结束标志'\0'后，字符数组的长度就显得不那么重要了，在程序中往往依靠检测'\0'的位置来判定字符串是否结束，而不是根据数组的长度来决定字符串长度。当然，在定义字符数组时应估计实际字符串长度，保证数组长度始终大于字符串实际长度。（在实际字符串定义中，常常并不指定数组长度，如char str[ ]）
说明：'\n'代表ASCII码为0的字符，从ASCII码表中可以查到ASCII码为0的字符不是一个可以显示的字符，而是一个“空操作符”，即它什么也不干。用它来作为字符串结束标志不会产生附加的操作或增加有效字符，只起一个供辨别的标志。
对C语言处理字符串的方法由以上的了解后，再对字符数组初始化的方法补充一种方法——即可以用字符串常量来初始化字符数组：
char str[ ]={"I am happy"};       可以省略花括号，如下所示
char str[ ]="I am happy";
注意：上述这种字符数组的整体赋值只能在字符数组初始化时使用，不能用于字符数组的赋值，字符数组的赋值只能对其元素一一赋值，下面的赋值方法是错误的
             char str[ ];
            str="I am happy";

不是用单个字符作为初值，而是用一个字符串（注意：字符串的两端是用双引号“”而不是单引号‘'括起来的）作为初值。显然，这种方法更直观方便。（注意：数组str的长度不是10，而是11，这点请务必记住，因为字符串常量"I am happy"的最后由系统自动加上一个'\0'） 
因此，上面的初始化与下面的初始化等价
char str[ ]={'I',' ','a','m',' ','h','a','p','p','y','\0'};
而不与下面的等价
char str[ ]={'I',' ','a','m',' ','h','a','p','p','y'};
前者的长度是11，后者的长度是10.
说明：字符数组并不要求它的最后一个字符为'\0'，甚至可以不包含'\0'，向下面这样写是完全合法的。
char str[5]={'C','h','i','n','a'};
++++++++
可见，用两种不同方法初始化字符数组后得到的数组长度是不同的。

#include <stdio.h>
void main(void)
{
char c1[]={'I',' ','a','m',' ','h','a','p','p','y'};
char c2[]="I am happy";
int i1=sizeof(c1);
int i2=sizeof(c2);
printf("%d\n",i1);
printf("%d\n",i2);
}
结果：10   11

3、字符串的表示形式
在C语言中，可以用两种方法表示和存放字符串：
（1）用字符数组存放一个字符串
          char str[ ]="I love China";
（2）用字符指针指向一个字符串
          char* str="I love China";
对于第二种表示方法，有人认为str是一个字符串变量，以为定义时把字符串常量"I love China"直接赋给该字符串变量，这是不对的。
C语言对字符串常量是按字符数组处理的，在内存中开辟了一个字符数组用来存放字符串常量，程序在定义字符串指针变量str时只是把字符串首地址（即存放字符串的字符数组的首地址）赋给str。
两种表示方式的字符串输出都用
printf("%s\n",str);
%s表示输出一个字符串，给出字符指针变量名str（对于第一种表示方法，字符数组名即是字符数组的首地址，与第二种中的指针意义是一致的），则系统先输出它所指向的一个字符数据，然后自动使str自动加1，使之指向下一个字符...，如此，直到遇到字符串结束标识符 " \0 "。

4、对使用字符指针变量和字符数组两种方法表示字符串的讨论
虽然用字符数组和字符指针变量都能实现字符串的存储和运算，但它们二者之间是有区别的，不应混为一谈。
4.1、字符数组由若干个元素组成，每个元素放一个字符；而字符指针变量中存放的是地址（字符串/字符数组的首地址），绝不是将字符串放到字符指针变量中（是字符串首地址）
4.2、赋值方式：
     对字符数组只能对各个元素赋值，不能用以下方法对字符数组赋值
     char str[14];
     str="I love China";     （但在字符数组初始化时可以，即char str[14]="I love China";）
     而对字符指针变量，采用下面方法赋值：
     char* a;
     a="I love China";
     或者是 char* a="I love China";       都可以
4.3、对字符指针变量赋初值（初始化）：
         char* a="I love China";      
等价于：
           char* a;
           a="I love China";
而对于字符数组的初始化
          char str[14]="I love China";
不能等价于：
         char str[14];
         str="I love China"; （这种不是初始化，而是赋值，而对数组这样赋值是不对的）
4.4、如果定义了一个字符数组，那么它有确定的内存地址；而定义一个字符指针变量时，它并未指向某个确定的字符数据，并且可以多次赋值。

5、字符串处理函数 
5.1
char *strcat(char *str1,const char *2 );
char *strcat(char *strDestination,const char *strSource );
功能：函数将字符串str2 连接到str1的末端，并返回指针str1
注：连接前两个字符串的后面都有一个' \0 '，连接时将字符串1后面的 ' \0 ‘去掉，只在新串最后保留一个 ' \0 ‘
5.2
char *strcpy(char *str1,const char *2 );
char *strcpy(char *strDestination,const char *strSource );
功能：复制字符串strSource中的字符到字符串strDestination，包括空值结束符。返回值为指针strDestination。
注：1、“字符数组1”必须写成数组名形式，“字符串2"可以是字符数组名，也可以是一个字符串常量
2、复制时连同字符串后面的 ' \0 ' 一起复制到数组1中
3、不能用赋值语句直接将一个字符串常量或者字符数组直接赋给一个字符数组（同普通变量数组是一样的），而只能用strcpy函数处理。
4、可以用strcpy函数将字符串2中的前若干个字符复制到字符数组1中去。

strcmp函数的C语言实现

#include <stdio.h>
#include<string.h>
void Strcmp(char *str1,char *str2)
{
    while((*str1!='\0')&&(*str1==*str2))
    {
        str1++;
        str2++;
    }
    int t;
    t=*str1-*str2;
    if(t==0)
        printf("same string\n");
    if(t>0)
        printf("str1 is bigger\n");
    if(t<0)
        printf("str2 is bigger\n");
}
int main()
{
    char str1[10],str2[10];
    start:
    gets(str1);
    gets(str2);
    Strcmp(str1,str2);
    goto start;
    return 0;
}


随便定义一个char类型字符串数组，此以char string[] = "iphone";为例。

实现strlen

    char string[] = "iphone";
    int i = 0;
    while (string[i] != '\0') {
        i ++;
    }
    printf("%d", i);

---------------------


实现strcpy

    char string1[20] = "ios";
    char string2[] = "android";
    //strcpy(string1,string2);
    int i = 0;
    while (string2[i] != '\0') {    //计算机识别到字符串后面 ‘\0’，条件成立，拷贝停止
        string1[i] = string2[i];
        i ++;
    }

    string1[i] = '\0';   //第i个字符串是‘\0’，最后给字符串加上

    printf("%s", string1);

---------------------


实现strcat

    char string1[] = "ios";
    char string2[] = "android";
    long int length = strlen(string1);
    int i = 0;
    while (string2[i] != '\0') {      //计算机直到识别到 ‘\0’，条件成立，拼接停止
        string1[i + length] = string2[i];
        i ++;
    }
    string1[i + length] = '\0';   //加上目的字符串的长度
    printf("%s", string1);
---------------------


实现strcmp


    char string1[] = "aww";
    char string2[] = "awwgwgg";
    int i = 0, j = 0;
    while (string1[1] - string2[i] != 0) {
        j = string1[i] -string2[i];
        i ++;
    }
    printf("%d", j);

---------------------

C语言实现trim() ltrim() rtrim()函数

void ltrim ( char *s )
{
    char *p;
    p = s;
    while ( *p == ' ' || *p == '\t' ) {*p++;}
    strcpy ( s,p );
}
 
void rtrim ( char *s )
{
    int i;
 
    i = strlen ( s )-1;
    while ( ( s[i] == ' ' || s[i] == '\t' ) && i >= 0 ) {i--;};
    s[i+1] = '\0';
}
 
void trim ( char *s )
{
    ltrim ( s );
    rtrim ( s );
}

---------------------


C语言字符串库函数的实现
1.strlen（字符串的长度）


size_t Strlen(const char* str)
{
    assert(str);
    for (size_t i = 0;; ++i)
    {
        if (str[i] == '\0')
            return i;
    }
}

size_t StrlenByRecursion(const char* str)
{
    return *str == '\0' ? 0 : StrlenByRecursion(str + 1) + 1;
}

size_t __cdecl strlen (const char * str)  //函数库里面实现的代码
{  
    const char *eos = str;  
      
    while( *eos++ ) ;  
      
    return( (int)(eos - str - 1) );  
}

2.strcpy（字符串拷贝）


char* Strcpy1(char* dst, const char* src)
{
    assert(dst && src);
    int i = 0;
    for (; src[i] != '\0'; ++i)
    {
        dst[i] = src[i];
    }
    dst[i] = '\0';
    return dst;
}

char* Strcpy2(char* dst, const char* src)
{
    assert(dst && src);
    char* tmp = dst;
    while ((*tmp++ = *src++) != '\0');
    *tmp = '\0';
    return dst;
}


char *  strcpy (char * dest,const char* src)     //函数库中的实现
{  
    reg_char c;  
    char *__unbounded s = (char *__unbounded) CHECK_BOUNDS_LOW (src);  
    const ptrdiff_t off = CHECK_BOUNDS_LOW (dest) - s - 1;  
    size_t n;  
      
    do  
    {  
        c = *s++;  
        s[off] = c;  
    }  
    while (c != '\0');  
      
    n = s - src;  
    (void) CHECK_BOUNDS_HIGH (src + n);  
    (void) CHECK_BOUNDS_HIGH (dest + n);  
      
    return dest;  
}


3.strncpy


char* Strncpy(char* dst,const char* src,int lenth)
{
    assert(dst && src);
    char* tmp = dst;
    while (lenth--)
    {
        if ((*tmp++ = *src) != '\0')
            src++;
    }
    *tmp = '\0';
    return dst;
}

char * __cdecl strncpy (char * dest,const char * source,size_t count)  
{  
    char *start = dest;  
      
    while (count && (*dest++ = *source++))    /* copy string */  
        count--;  
      
    if (count)                              /* pad out with zeroes */  
        while (--count)  
            *dest++ = '\0';  
          
        return(start);  
} 

4.strcat（字符串连接）


char* Strcat(char* dst, const char* src)
{
    assert(dst && src);
    char* tmp = dst;
    while (*tmp)
        tmp++;
    while ((*tmp++ = *src++) != '\0');
    return dst;
}

char * __cdecl strcat (char * dst,const char * src)     //库中的实现方法
{  
    char * cp = dst;  

    while( *cp )  
        cp++;                   /* find end of dst */  

    while( *cp++ = *src++ ) ;       /* Copy src to end of dst */  

    return( dst );                  /* return dst */  
} 

5.strncat


char* Strncat(char* dst,const char* src,size_t lenth)
{
    assert(dst && src);
    char* tmp = dst;
    while (*tmp)
        ++tmp;
    while (lenth-- && (*tmp++ = *src++));
    *tmp = '\0';
    return dst;
}

char * __cdecl strncat (char * front,const char * back,size_t count)     //库中实现的方法
{  
    char *start = front;  
      
    while (*front++)  
        ;  
    front--;  
      
    while (count--)  
        if (!(*front++ = *back++))  
            return(start);  
          
        *front = '\0';  
        return(start);  
}  

6.strcmp

int Strcmp(const char* str1, const char* str2)
{
    assert(str1 && str2);
    while (*str1 == *str2 && *str2)
    {
        str1++;
        str2++;
    }
    return *（unsigned char*）str1 - *（unsigend char*）str2;
}

int __cdecl strcmp (const char * src,const char * dst)      //库中的实现方式
{  
    int ret = 0 ;  
    while( ! (ret = *(unsigned char *)src - *(unsigned char *)dst) && *dst)  
        ++src, ++dst;  
      
    if ( ret < 0 )  
        ret = -1 ;  
    else if ( ret > 0 )  
        ret = 1 ;  
      
    return( ret );  
}  


7.strncmp


int Strncmp(const char* str1, const char* str2,size_t lenth)
{
    assert(str1 && str2);
    while (lenth-- && *str2)
    {
        if (*str1 != *str2)
            return *(unsigned char*)str1 - *(unsigned char*)str2;
        str1++;
        str2++;
    }
    return 0;
}

int __cdecl strncmp (const char * first,const char * last,size_t count)     //库里实现的方式
{  
    if (!count)  
        return(0);  
      
    while (--count && *first && *first == *last)  
    {  
        first++;  
        last++;  
    }  
      
    return( *(unsigned char *)first - *(unsigned char *)last );  
}  

---------------------

//编写函数实现库函数atof
#include <stdio.h>
#include <assert.h>
#include <ctype.h>
#include <math.h>
double calculate(const char *src, int flag)
{
	double num = 0.0;
	int n = 0;
	int count = 0;
	while (*src)
	{
		if ((*src >= '0') && (*src <= '9'))//推断输入是否为非数组字符
		{
			num = num * 10 + (*src - '0');
			src++;
			if (n)
			{
				count++;
			}
		}
		else if (*src == '.')
		{
			n = 1;
			src++;
		}
		else
		{
			num = 0;
			break;
		}
	}
	if (n)
	{
		num = num / powl(10,count);
	}
	return flag * num;
}
double str_to_int(const char *str)
{
	double num = 0.0;
	int flag = 1;
	if (str != NULL && *str != '\0')
	{
		while (isspace(*str))
		{
			str++;
		}
		if (*str == '+')
			str++;
		else if (*str == '-')
		{
			str++;
			flag = -1;
		}
		 if (*str != '\0')
		{
			num = calculate(str, flag);
		}
	}
	return num;
}
int main()
{
	printf("%f\n", str_to_int(" +23.45"));
	printf("%f\n", str_to_int(" -2.345"));
	printf("%f\n", str_to_int("+234.5"));
	printf("%f\n", str_to_int("-2345.44"));
	printf("%f\n", str_to_int("2345"));
	printf("%f\n", str_to_int("-1111.11"));
	printf("%f\n", str_to_int(""));
	printf("%f\n", str_to_int("123ab"));
	return 0;
}

---------------------
---------------------
---------------------
---------------------



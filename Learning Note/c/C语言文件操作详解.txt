C语言文件操作详解

fopen文件打开模式


r代表read的简写，+代表可读可写，w代表write，b代表bit二进制位，t代表text

r 打开只读文件，该文件必须存在
r+ 打开可读可写的文件，该文件必须存在(这里的写文件是指将之前的文件覆盖
rt 打开只读文本文件，该文本必须存在
rt+ 读写打开一个文本文件，允许读和写，该文件必须存在(这里的写文件是指将之前的文件覆盖
rb 只读打开一个二进制文件，，该文本必须存在
rb+ 读写打开一个文本文件，允许读和写，该文件必须存在(这里的写文件是指将之前的文件覆盖


w 打开只写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
w+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件(这里的读文件，同样需要使用rewind()函数)
wt 打开只写文本文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
wt+ 打开可读写文本文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
wb 打开只写二进制文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件
wb+ 打开可读写文件，若文件存在，则文件长度清零，即文件内容会消失，若文件不存在则建立该文件


a以附加的方式打开只写文件，若文件不存在，则建立文件，存在则在文件尾部添加数据,即追加内容
a+以附加的方式打开可读写文件，不存在则建立文件，存在则写入数据到文件尾(这里的读文件，同样需要使用rewind()函数，但是写文件不需要rewind()函数，a是追加)
at二进制数据的追加，不存在则创建，只能写。
at+读写打开一个文本文件，允许读或在文本末追加数据(这里的读文件，同样需要使用rewind()函数，但是写文件不需要rewind()函数，a是追加)
ab二进制数据的追加，不存在则创建，只能写。
ab+读写打开一个二进制文件，不存在则创建,允许读或在文本末追加数据(这里的读文件，同样需要使用rewind()函数，但是写文件不需要rewind()函数，a是追加)

C语言中没有输入输出语句，所有的输入输出功能都用 ANSI C提供的一组标准库函数来实现。文件操作标准库函数有：

　　 　　 文件的打开操作 fopen 打开一个文件

　　 　　 文件的关闭操作 fclose 关闭一个文件

　　 　　 文件的读写操作 fgetc 从文件中读取一个字符
　　 　　 　　　　　　　 fputc 写一个字符到文件中去
　　 　　 　　　　　　　 fgets 从文件中读取一个字符串
　　 　　 　　　　　　　 fputs 写一个字符串到文件中去
　　 　　 　　　　　　　 fprintf 往文件中写格式化数据
　　 　　 　　　　　　　 fscanf 格式化读取文件中数据
　　 　　 　　　　　　　 fread 以二进制形式读取文件中的数据
　　 　　 　　　　　　　 fwrite 以二进制形式写数据到文件中去
　　 　　 　　　　　　　 getw 以二进制形式读取一个整数
　　 　　 　　　　　　　 putw 以二进制形式存贮一个整数

　　 　文件状态检查函数 feof 文件结束
　　 　　 　　　　　　　 ferror 文件读/写出错
　　 　　 　　　　　　　 clearerr 清除文件错误标志
　　 　　 　　　　　　　 ftell 了解文件指针的当前位置

　　　　　　文件定位函数 rewind 反绕
　　 　　 　　　　　　　 fseek 随机定位

# 文件的打开
　1．函数原型

FILE *fopen(char *pname,char *mode)
　2．功能说明
　　 按照mode 规定的方式，打开由pname指定的文件。若找不到由pname指定的相应文件，就按以下方式之一处理：
（1） 此时如mode 规定按写方式打开文件，就按由pname指定的名字建立一个新文件；
（2） 此时如mode 规定按读方式打开文件，就会产生一个错误。

打开文件的作用是：
（1）分配给打开文件一个FILE 类型的文件结构体变量，并将有关信息填入文件结构体变量；
（2）开辟一个缓冲区；
（3）调用操作系统提供的打开文件或建立新文件功能，打开或建立指定文件；
FILE *：指出fopen是一个返回文件类型的指针函数；

　3．参数说明
pname：是一个字符指针，它将指向要打开或建立的文件的文件名字符串。
mode：是一个指向文件处理方式字符串的字符指针。所有可能的文件处理方式见表8.1

　4．返回值
　　　正常返回：被打开文件的文件指针。
　　　异常返回：NULL，表示打开操作不成功。

例如：


//定义一个名叫fp文件指针
FILE *fp；
//判断按读方式打开一个名叫test的文件是否失败
if((fp=fopen（"test"，"r"）) == NULL)//打开操作不成功
{
    printf("The file can not be opened.\n")；    　
    exit(1);//结束程序的执行
}

　要说明的是：C语言将计算机的输入输出设备都看作是文件。例如，键盘文件、屏幕文件等。ANSI C标准规定，在执行程序时系统先自动打开键盘、屏幕、错误三个文件。这三个文件的文件指针分别是：标准输入stdin、标准输出stdout和标准出错 stderr。

* 文件的关闭

1． 函数原型

int fclose(FILE *fp)；
2． 功能说明
　　关闭由fp指出的文件。此时调用操作系统提供的文件关闭功能，关闭由fp->fd指出的文件；释放由fp指出的文件类型结构体变量；返回操作结果，即0或EOF。

3． 参数说明
　　fp：一个已打开文件的文件指针。

4． 返回值
　　正常返回：0。
　　异常返回：EOF，表示文件在关闭时发生错误。
例如：

int n=fclose(fp);
*文件的读写操作

A. 从文件中读取一个字符
　　1． 函数原型

int fgetc(FILE *fp)；
　　2． 功能说明
　　　　从fp所指文件中读取一个字符。
　　3． 参数说明
　　　　fp：这是个文件指针，它指出要从中读取字符的文件。
　　4． 返回值
　　　　正常返回： 返回读取字符的代码。
　　　　非正常返回：返回EOF。例如，要从"写打开"文件中读取一个字符时，会发生错误而返回一个EOF。
　　5． 实例

【例8.1】显示指定文件的内容。


//程序名为：display.c
//执行时可用：display filename1 形式的命令行运行。显示文件filename1中的内容。例如，执行命令行display display.c将在屏幕上显示display的原代码。

//File display program.
#include <stdio.h>
void main(int argc,char *argv[]) //命令行参数
{
    int ch;//定义文件类型指针
    FILE *fp;//判断命令行是否正确
    if(argc!=2)
    {
        printf("Error format,Usage: display filename1\n");
        return; //键入了错误的命令行，结束程序的执行
    }
    //按读方式打开由argv[1]指出的文件
    if((fp=fopen(argv[1],"r"))==NULL)
    {
        printf("The file <%s> can not be opened.\n",argv[1]);//打开操作不成功
        return;//结束程序的执行
    }
    //成功打开了argv[1]所指文件
    ch=fgetc(fp); //从fp所指文件的当前指针位置读取一个字符
    while(ch!=EOF) //判断刚读取的字符是否是文件结束符
    {
        putchar(ch); //若不是结束符，将它输出到屏幕上显示
        ch=fgetc(fp); //继续从fp所指文件中读取下一个字符
    } //完成将fp所指文件的内容输出到屏幕上显示
    fclose(fp); //关闭fp所指文件
}

B. 写一个字符到文件中去

1． 函数原型

int fputc(int ch,FILE *fp)
2． 功能说明
　　把ch中的字符写入由fp指出的文件中去。
3． 参数说明
　　ch：是一个整型变量，内存要写到文件中的字符（C语言中整型量和字符量可以通用）。
　　fp：这是个文件指针，指出要在其中写入字符的文件。
4． 返回值
　　正常返回： 要写入字符的代码。
　　非正常返回：返回EOF。例如，要往"读打开"文件中写一个字符时，会发生错误而返回一个EOF。
5． 实例

【例8.2】将一个文件的内容复制到另一个文件中去。


//程序名为：copyfile.c
//执行时可用：copyfile filename1 filename2形式的命令行运行，将文件filename1中的内容复制到文件filename2中去。
//file copy program.
#include <stdio.h>
void main(int argc,char *argv[]) //命令行参数
{
    int ch;
    FILE *in,*out; //定义in和out两个文件类型指针
    if(argc!=3) //判断命令行是否正确
    {
        printf("Error in format,Usage: copyfile filename1 filename2\n");
        return; //命令行错，结束程序的执行
    }
    //按读方式打开由argv[1]指出的文件
    if((in=fopen(argv[1],"r"))==NULL)
    {
        printf("The file <%s> can not be opened.\n",argv[1]);
        return; //打开失败，结束程序的执行
    }
    //成功打开了argv[1]所指文件，再
    //按写方式打开由argv[2]指出的文件
    if((out=fopen(argv[2],"w"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[2]);
        return; //打开失败，结束程序的执行
    }
    //成功打开了argv[2]所指文件
    ch=fgetc(in); //从in所指文件的当前指针位置读取一个字符
    while(ch!=EOF) //判断刚读取的字符是否是文件结束符
    {
        fputc(ch,out); //若不是结束符，将它写入out所指文件
        ch=fgetc(in); //继续从in所指文件中读取下一个字符
    } //完成将in所指文件的内容写入（复制）到out所指文件中
    fclose(in); //关闭in所指文件
    fclose(out); //关闭out所指文件
}

【例8.3】按十进制和字符显示文件代码，若遇不可示字符就用井号"#"字符代替之。


//程序名为：dumpf.c
//执行时可用：dumpf filename1 形式的命令行运行。
// File dump program.
#include <stdio.h>
void main(int argc,char *argv[])
{
    char str[9];
    int ch,count,i;
    FILE *fp;
    if(argc!=2)
    {
        printf("Error format,Usage: dumpf filename\n");
        return;
    }
    if((fp=fopen(argv[1],"r"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    count=0;
    do{
        i=0;
        //按八进制输出第一列，作为一行八个字节的首地址
        printf("%06o: ",count*8);
        do{
            // 从打开的文件中读取一个字符
            ch=fgetc(fp);
            // 按十进制方式输出这个字符的ASCII码
            printf("%4d",ch);
            // 如果是不可示字符就用"#"字符代替
            if(ch<' '||ch>'~') str[i]='#';
            // 如果是可示字符，就将它存入数组str以便形成字符串
            else str[i]=ch;
            // 保证每一行输出八个字符
            if(++i==8) break;
        }while(ch!=EOF); // 遇到文件尾标志，结束读文件操作
        str[i]='\0'; // 在数组str加字符串结束标志
        for(;i<8;i++) printf(" "); // 一行不足八个字符用空格填充
        printf(" %s\n",str); // 输出字符串
        count++; // 准备输出下一行
    }while(ch!=EOF); // 直到文件结束
    fclose(fp); // 关闭fp所指文件
}

C. 从文件中读取一个字符串

1． 函数原型
　　char *fgets(char *str,int n,FILE *fp)
2． 功能说明
　　从由fp指出的文件中读取n-1个字符，并把它们存放到由str指出的字符数组中去，最后加上一个字符串结束符'\0'。
3． 参数说明
　　str：接收字符串的内存地址，可以是数组名，也可以是指针。
　　n： 指出要读取字符的个数。
　　fp：这是个文件指针，指出要从中读取字符的文件。
4． 返回值

正常返回：返回字符串的内存首地址，即str的值。
非正常返回：返回一个NULL值，此时应当用feof()或ferror()函数来判别是读取到了文件尾，还是发生了错误。例如，要从"写打开"文件中读取字符串，将
发生错误而返回一个NULL值。

D. 写一个字符串到文件中去

1． 函数原型

int fputs(char *str,FILE *fp)
2． 功能说明
　　把由str指出的字符串写入到fp所指的文件中去。
3． 参数说明
　　str：指出要写到文件中去的字符串。
　　fp：这是个文件指针，指出字符串要写入其中的文件。
4． 返回值
　　正常返回： 写入文件的字符个数，即字符串的长度。
　　非正常返回：返回一个NULL值，此时应当用feof()或ferror()函数来判别是读取到了文件尾，还是发生了错误。例如，要往一个"读打开" 文件中写字符串时，
会发生错误而返回一个NULL值。

5．实例

【例8.4】以下程序将一个文件的内容附加到另一个文件中去。


//程序名：linkfile.c
//执行时可用：linkfile filename1 filename2形式的命令行运行，将文件filename2的内容附加在文件filename1之后。
// file linked program.
#include <stdio.h>
#define SIZE 512
void main(int argc,char *argv[])
{
    char buffer[SIZE];
    FILE *fp1,*fp2;
    if(argc!=3)
    {
        printf("Usage: linkfile filename1 filename2\n");
        return;
    }
    // 按追加方式打开argv[1] 所指文件
    if((fp1=fopen(argv[1],"a"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    if((fp2=fopen(argv[2],"r"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[2]);
        return;
    }
    // 读入一行立即写出，直到文件结束
    while(fgets(buffer,SIZE,fp1)!=NULL)
        printf("%s\n",buffer);
    while(fgets(buffer,SIZE,fp2)!=NULL)
        fputs(buffer,fp1);
    fclose(fp1);
    fclose(fp2);
    if((fp1=fopen(argv[1],"r"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    while(fgets(buffer,SIZE,fp1)!=NULL)
        printf("%s\n",buffer);
    fclose(fp1);
}

E. 往文件中写格式化数据

1．函数原型

int fprintf(FILE *fp,char *format,arg_list)
2．功能说明
　　将变量表列（arg_list）中的数据，按照format指出的格式，写入由fp指定的文件。fprintf()函数与printf()函数的功能相同，只是printf()函数是将数据写入屏幕文件（stdout）。
3．参数说明
　　fp：这是个文件指针，指出要将数据写入的文件。
　　format：这是个指向字符串的字符指针，字符串中含有要写出数据的格式，所以该字符串成为格式串。格式串描述的规则与printf()函数中的格式串相同。
arg_list：是要写入文件的变量表列，各变量之间用逗号分隔。
4．返回值
　　无。
5． 实例

【8.5】下列程序的执行文件为display.exe，执行时键入命令行：
　　　display [-i][-s] filename
下面的表格列出了命令行参数的含义及其功能：


//存储文件名：save.txt
//程序代码如下：
// file display program.
#include <stdio.h>
void main()
{
    char name[10];
    int nAge,nClass;
    long number;
    FILE *fp;
    if((fp=fopen("student.txt","w"))==NULL)
    {
        printf("The file %s can not be opened.\n","student.txt");
        return;
    }
    fscanf(stdin,"%s %d %d %ld",name,&nClass,&nAge,&number);
    fprintf(fp,"%s %5d %4d %8ld",name,nClass,nAge,number);
    fclose(fp);
    if((fp=fopen("student.txt","r"))==NULL)
    {
        printf("The file %s can not be opened.\n","student.txt");
        return;
    }
    fscanf(fp,"%s %d %d %ld",name,&nClass,&nAge,&number);
    printf("name nClass nAge number\n");
    fprintf(stdout,"%-10s%-8d%-6d%-8ld\n",name,nClass,nAge,number);
    fclose(fp);
}

G. 以二进制形式读取文件中的数据

1． 函数原型

int fread(void *buffer,unsigned sife,unsigned count,FILE *fp)
2． 功能说明
　　从由fp指定的文件中，按二进制形式将sife*count个数据读到由buffer指出的数据区中。
3． 参数说明
buffer：这是一个void型指针，指出要将读入数据存放在其中的存储区首地址。
sife：指出一个数据块的字节数，即一个数据块的大小尺寸。
count：指出一次读入多少个数据块（sife）。
fp：这是个文件指针，指出要从其中读出数据的文件。
4．返回值
　　正常返回：实际读取数据块的个数，即count。
　　异常返回：如果文件中剩下的数据块个数少于参数中count指出的个数，或者发生了错误，返回0值。此时可以用feof()和ferror()来判定到底出现了什么
情况。

H. 以二进制形式写数据到文件中去

1． 函数原型

int fwrite(void *buffer,unsigned sife,unsigned count,FILE *fp)
2． 功能说明
　　按二进制形式，将由buffer指定的数据缓冲区内的sife*count个数据写入由fp指定的文件中去。
3． 参数说明
buffer：这是一个void型指针，指出要将其中数据输出到文件的缓冲区首地址。
sife：指出一个数据块的字节数，即一个数据块的大小尺寸。
count：一次输出多少个数据块（sife）。
fp：这是个文件指针，指出要从其中读出数据的文件。
4．返回值
　　正常返回：实际输出数据块的个数，即count。
　　异常返回：返回0值，表示输出结束或发生了错误。
5．实例

【例8.7】


#include <stdio.h>
#define SIZE 4
struct worker
{ int number;
    char name[20];
    int age;
};
void main()
{
    struct worker wk;
    int n;
    FILE *in,*out;
    if((in=fopen("file1.txt","rb"))==NULL)
    {
        printf("The file %s can not be opened.\n","file1.txt");
        return;
    }
    if((out=fopen("file2.txt","wb"))==NULL)
    {
        printf("The file %s can not be opened.\n","file2.txt");
        return;
    }
    while(fread(&wk,sizeof(struct worker),1,in)==1)
        fwrite(&wk,sizeof(struct worker),1,out);
    fclose(in);
    fclose(out);
}

I. 以二进制形式读取一个整数

1． 函数原型

int getw(FILE *fp)
2． 功能说明
　　从由fp指定的文件中，以二进制形式读取一个整数。
3． 参数说明
　　fp：是文件指针。
4． 返回值
　　正常返回：所读取整数的值。
　　异常返回：返回EOF，即-1。由于读取的整数值有可能是-1，所以必须用feof()或ferror()来判断是到了文件结束，还是出现了一个出错。
5． 实例

【例8.8】


#include <stdio.h>
void main(int argc,char *argv[])
{
    int i,sum=0;
    FILE *fp;
    if(argc!=2)
    {
        printf("Command error,Usage: readfile filename\n");
        exit(1);
    }
    if(!(fp=fopen(argv[1],"rb")))
    {
        printf("The file %s can not be opened.\n",argv[1]);
        exit(1);
    }
    for(i=1;i<=10;i++) sum+=getw(fp);
    printf("The sum is %d\n",sum);
    fclose(fp);
}

J. 以二进制形式存贮一个整数

1．函数原型

int putw(int n,FILE *fp)
2． 功能说明
　以二进制形式把由变量n指出的整数值存放到由fp指定的文件中。
3． 参数说明
　n：要存入文件的整数。
　fp：是文件指针。
4． 返回值
　正常返回：所输出的整数值。
　异常返回：返回EOF，即-1。由于输出的整数值有可能是-1，所以必须用feof()或ferror()来判断是到了文件结束，还是出现了一个出错。
5． 实例

【例8.9】


#include <stdio.h>
void main(int argc,char *argv[])
{
    int i;
    FILE *fp;
    if(argc!=2)
    {
        printf("Command error,Usage: writefile filename\n");
        return;
    }

    if(!(fp=fopen(argv[1],"wb")))
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    for(i=1;i<=10;i++) printf("%d\n", putw(i,fp));
    fclose(fp);
}

* 文件状态检查

A. 文件结束
（1） 函数原型

int feof(FILE *fp)
（2） 功能说明
　　　该函数用来判断文件是否结束。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　0：假值，表示文件未结束。
　　　1：真值，表示文件结束。
（5） 实例

【例8.10】


#include <stdio.h>
void main(int argc,char *argv[])
{
    FILE *in,*out;
    char ch;
    if(argc!=3)
    {
        printf("Usage: copyfile filename1 filename2\n");
        return;
    }
    if((in=fopen(argv[1],"rb"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    if((out=fopen(argv[2],"wb"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[2]);
        return;
    }
    while(!feof(in))
    {
        ch=fgetc(in);
        if(ferror(in))
        {
            printf("read error!\n");
            clearerr(in);
        }
        else
        {
            fputc(ch,out);
            if(ferror(out))
            {
                printf("write error!\n");
                clearerr(out);
            }
        }
    }
    fclose(in);
    fclose(out);
}

B. 文件读/写出错
（1） 函数原型

int ferror(FILE *fp)
（2） 功能说明
　　　检查由fp指定的文件在读写时是否出错。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　0：假值，表示无错误。
　　　1：真值，表示出错。

C. 清除文件错误标志

（1） 函数原型

void clearerr(FILE *fp)
（2） 功能说明
　　　清除由fp指定文件的错误标志。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　无。
（5） 实例

【例8.12】


#include <stdio.h>
void main(int argc,char *argv[])
{
    FILE *in,*out;
    char ch;
    if(argc!=3)
    {
        printf("Usage: copyfile filename1 filename2\n");
        return;
    }
    if((in=fopen(argv[1],"rb"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[1]);
        return;
    }
    if((out=fopen(argv[2],"wb"))==NULL)
    {
        printf("The file %s can not be opened.\n",argv[2]);
        return;
    }
    while(!feof(in))
    {
        ch=fgetc(in);
        if(ferror(in))
        {
            printf("read error!\n");
            clearerr(in);
        }
        else
        {
            fputc(ch,out);
            if(ferror(out))
            {
                printf("write error!\n");
                clearerr(out);
            }
        }
    }
    fclose(in);
    fclose(out);
}

D. 了解文件指针的当前位置
（1） 函数原型

long ftell(FILE *fp)
（2） 功能说明
　　　取得由fp指定文件的当前读/写位置，该位置值用相对于文件开头的位移量来表示。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　正常返回：位移量（这是个长整数）。
　　　异常返回：-1，表示出错。
（5） 实例

* 文件定位

A. 反绕
（1） 函数原型

void rewind(FILE *fp)
（2） 功能说明
　　　使由文件指针fp指定的文件的位置指针重新指向文件的开头位置。
（3） 参数说明
　　　fp：文件指针。
（4） 返回值
　　　无。
（5） 实例

【例8.14】


#include <stdio.h>
void main()
{
    FILE *in,*out;
    in=fopen("filename1","r");
    out=fopen("filename2","w");
    while(!feof(in)) fputc(fgetc(in),out);
    rewind(out);
    while(!feof(in)) putchar(fgetc(in));
    fclose(in);
    fclose(out);
}

B. 随机定位
（1） 函数原型

int fseek(FILE *fp,long offset,int base)
（2） 功能说明
　　　使文件指针fp移到基于base的相对位置offset处。
（3）参数说明
　　　fp：文件指针。
　　　offset：相对base的字节位移量。这是个长整数，用以支持大于64KB的文件。
　　　base：文件位置指针移动的基准位置，是计算文件位置指针位移的基点。ANSI C定义了base的可能取值，以及这些取值的符号常量。

（4）返回值

　　正常返回：当前指针位置。
　　异常返回：-1，表示定位操作出错。

（5）实例
【例8.15】


#include <stdio.h>
#include <string.h>
struct std_type
{
    int num;
    char name[20];
    int age;
    char class;
}stud;
int cstufile()
{
    int i;
    FILE *fp;
    if((fp=fopen("stufile","wb"))==NULL)
    {
        printf("The file can't be opened for write.\n");
        return 0;
    }
    for(i=1;i<=100;i++)
    {
        stud.num=i;
        strcpy(stud.name,"aaaa");
        stud.age=17;
        stud.class='8';
        fwrite(&stud,sizeof(struct std_type),1,fp);
    }
    fclose(fp);
    return 1;
}
void main()
{
    int n;
    FILE *fp;
    if(cstufile()==0) return;
    if((fp=fopen("stufile","rb"))==NULL)
    {
        printf("The file can not be opened.\n");
        return;
    }
    for(n=0;n<100;n+=2)
    {
        fseek(fp,n*sizeof(struct std_type),SEEK_SET);
        fread(&stud,sizeof(struct std_type),1,fp);
        printf("%10d%20s%10d%4c\n",stud.num,stud.name,stud.age,stud.class);
    }
    fclose(fp);
}

* 关于exit()函数
1． 函数原型

void exit(int status)
2． 功能说明
　　exit()函数使程序立即终止执行，同时将缓冲区中剩余的数据输出并关闭所有已经打开的文件。
3． 参数说明
　　status：为0值表示程序正常终止，为非0值表示一个定义错误。
4． 返回值
　　无。

* 关于feof()函数
1． 函数原型

int feof(FILE *fp)
2． 功能说明
　 　在文本文件（ASCII文件）中可以用值为-1的符号常量EOF来作为文件的结束符。但是在二进制文件中-1往往可能是一个有意义的数据，因此不能用它 来作为文件的结束标志。为了能有效判别文件是否结束，ANSI C提供了标准函数feof()，用来识别文件是否结束。
3． 参数说明
　　fp：文件指针。
4． 返回值
　　返回为非0值：已到文件尾。
　　返回为0值：表示还未到文件尾。


gets和fgets函数及其区别，C语言gets和fgets函数详解

每当讨论 gets 函数时，大家不由自主地就会想起 1988 年的“互联网蠕虫”，它在 UNIX 操作系统的 finger 后台程序中使用一个 gets 调用作为它的攻击方式之一。很显然，对蠕虫病毒的实现来说， gets 函数的功劳不可小视。不仅如此，GCC 也不推荐使用gets和puts函数。

那么，究竟是什么原因导致 gets 函数这么不招人待见呢？

我们知道，对于 gets 函数，它的任务是从 stdin 流中读取字符串，直至接收到换行符或 EOF 时停止，并将读取的结果存放在 buffer 指针所指向的字符数组中。这里需要注意的是，换行符不作为读取串的内容，读取的换行符被转换为 null('\0') 值，并由此来结束字符串。即换行符会被丢弃，然后在末尾添加 null('\0') 字符。其函数的原型如下：
char* gets(char* buffer);
如果读入成功，则返回与参数 buffer 相同的指针；如果读入过程中遇到 EOF 或发生错误，返回 NULL 指针。因此，在遇到返回值为 NULL 的情况，要用 ferror 或 feof 函数检查是发生错误还是遇到 EOF。

函数 gets 可以无限读取，不会判断上限，所以程序员应该确保 buffer 的空间足够大，以便在执行读操作时不发生溢出。也就是说，gets 函数并不检查缓冲区 buffer 的空间大小，事实上它也无法检查缓冲区的空间。

如果函数的调用者提供了一个指向堆栈的指针，并且 gets 函数读入的字符数量超过了缓冲区的空间（即发生溢出），gets 函数会将多出来的字符继续写入堆栈中，这样就覆盖了堆栈中原来的内容，破坏一个或多个不相关变量的值。如下面的示例代码所示：
int main(void)
{
    char buffer[11];
    gets(buffer);
    printf("输出： %s\n",buffer);
    return 0;
}
示例代码的运行结果为：
aaa
输出： aaa

根据运行结果，当用户在键盘上输入的字符个数大于缓冲区 buffer 的最大界限时，gets 函数也不会对其进行任何检查，因此我们可以将恶意代码多出来的数据写入堆栈。由此可见，gets 函数是极其不安全的，可能成为病毒的入口，因为 gets 函数没有限制输入的字符串长度。所以我们应该使用 fgets 函数来替换 gets 函数，实际上这也是大多程序员所推荐的做法。

相对于 gets 函数，fgets 函数最大的改进就是能够读取指定大小的数据，从而避免 gets 函数从 stdin 接收字符串而不检查它所复制的缓冲区空间大小导致的缓存溢出问题。当然，fgets 函数主要是为文件 I/O 而设计的（注意，不能用 fgets 函数读取二进制文件，因为 fgets 函数会把二进制文件当成文本文件来处理，这势必会产生乱码等不必要的麻烦）。其中，fgets 函数的原型如下：
char *fgets(char *buf, int bufsize, FILE *stream);
该函数的第二个参数 bufsize 用来指示最大读入字符数。如果这个参数值为 n，那么 fgets 函数就会读取最多 n-1 个字符或者读完一个换行符为止，在这两者之中，最先满足的那个条件用于结束输入。

与 gets 函数不同的是，如果 fgets 函数读到换行符，就会把它存储到字符串中，而不是像 gets 函数那样丢弃它。即给定参数 n，fgets 函数只能读取 n-1 个字符（包括换行符）。如果有一行超过 n-1 个字符，那么 fgets 函数将返回一个不完整的行（只读取该行的前 n-1 个字符）。但是，缓冲区总是以 null('\0') 字符结尾，对 fgets 函数的下一次调用会继续读取该行。

也就是说，每次调用时，fgets 函数都会把缓冲区的最后一个字符设为 null('\0')，这意味着最后一个字符不能用来存放需要的数据。所以如果某一行含有 size 个字符（包括换行符），要想把这行读入缓冲区，要把参数 n 设为 size+1，即多留一个位置存储 null('\0')。

最后，它还需要第 3 个参数来说明读取哪个文件。如果是从键盘上读入数据，可以使用 stdin 作为该参数，如下面的代码所示：
int main(void)
{
    char buffer[11];
    fgets(buffer,11,stdin);
    printf("输出： %s\n",buffer);
    return 0;
}
对于上面的示例代码，如果输入的字符串小于或等于 10 个字符，那么程序将完整地输出结果；如果输入的字符串大于 10 个字符，那么程序将截断输入的字符串，最后只输出前 10 个字符。示例代码运行结果为：

aaaaaaaaaaaaaaaa
输出： aaaaaaaaaa

除此之外，C99 还提供了 fgets 函数的宽字符版本 fgetws 函数，其函数的一般原型如下面的代码所示：
wchar_t *fgetws(wchar_t * restrict s, int n, FILE * restrict stream);
该函数的功能与 fgets 函数一样。


puts和fputs函数及其区别，C语言puts和fputs函数详解

与 gets 函数一样，对于 puts 函数，同样建议使用 fputs 函数来代替 puts 函数。如下面的示例代码所示：
int main(void)
{
    char buffer[11];
    fgets(buffer,11,stdin);
    fputs(buffer,stdout);
    return 0;
}
其中，puts 函数的原型如下所示：
int puts(const char *str);

我们知道，puts 函数主要用于向标准输出设备（屏幕）写入字符串并换行，即自动写一个换行符（'\n'）到标准输出。理论上，该函数的作用与“printf("%s\n",str);”语句相同。但是，puts 函数只能输出字符串，不能进行相关的格式变换。与此同时，它需要遇到 null('\0') 字符才停止输出。因此，非字符串或无 null('\0') 字符的字符数组最好不要使用该函数打印，否则无法正常结束。如下面的代码所示：
int main(void)
{
    char str[] = {'H','E','L','L','O'};
    puts(str);
    return 0;
}
在上面的示例代码中，因为字符数组 str 在结尾处缺少一个 null('\0') 字符（也就是说它不是一个严格意义上的字符串）。因此，在调用 puts 函数的时候，程序将不知道什么时候停止输出，从而导致输出结果未定义。运行结果如下图所示：


图 1 示例代码的运行结果（Microsoft Visual Studio 2010）

正确的做法是应该在字符数组 str 的结尾处添加一个 null('\0') 字符，如下面的示例代码所示：
char str[] = {'H','E','L','L','O','\0'};
fputs 函数的函数原型如下所示：
int fputs(const char *str, FILE *stream);

相对于 puts 函数，fputs 函数用来向指定的文件写入一个字符串（不换行）。当然，也可以使用 stdout 作为参数进行输出显示（它同样需要遇到 null('\0') 字符才停止输出），如下面的代码所示：
int main(void)
{
    char str[] = {'H','E','L','L','O','\0'};
    fputs(str,stdout);
    return 0;
}
其运行结果如下图所示：

、
图 2 示例代码的运行结果（Microsoft Visual Studio 2010）

当然，fputs 函数主要用于对指定文件进行写入操作，如下面的示例代码所示：
int main(void)
{
    FILE *fp=NULL;
    fp=fopen("myfile.txt","wb");
    if(fp == NULL)
    {
        printf("不能够访问该文件.\n");
        exit(1);
    }
    fputs("this is a test", fp);
    fclose(fp);
    fp=NULL;
    return 0;
}
运行上面的示例代码，文件“myfile.txt”会被写入一行“this is a test”字符串。

与 fgetws 一样，C99 同样也提供了 fputs 函数的宽字符版本 fputws，其函数的一般原型如下面的代码所示：
int fputws(const wchar_t * restrict s, FILE * restrict stream);


fread和fwrite函数，C语言fread和fwrite函数详解
 fseek、ftell和rewind函数文本流和二进制流 
对文件格式化读写函数 fprintf 与 fscanf 而言，尽管它可以从磁盘文件中读写任何类型的文件，即读写的文件类型可以是文本文件、二进制文件，也可以是其他形式的文件。但是，对二进制文件的读写来说，考虑到文件的读写效率等原因，还是建议尽量使用 fread 和 fwrite 函数进行读写操作。

fread 与 fwrite 函数的原型如下面的代码所示：
size_t fread(void *buf, size_t size, size_t count, FILE *fp);
size_t fwrite(const void * buf, size_t size, size_t count, FILE *fp);

在上面的 fread 和 fwrite 函数原型中：
参数 size 是指单个元素的大小（其单位是字节而不是位，例如，读取一个 int 型数据就是 4 字节）；
参数 count 指出要读或写的元素个数，这些元素在 buf 所指的内存空间中连续存放，共占“size*count”个字节。

即 fread 函数从文件 fp 中读出“size*count”个字节保存到 buf 中，而 fwrite 把 buf 中的“size*count”个字节写到文件 fp 中。最后，函数 fread 和 fwrite 的返回值为读或写的记录数，成功时返回的记录数等于 count 参数，出错或读到文件末尾时返回的记录数小于 count，也可能返回 0。

需要注意的是，尽管 fread 和 fwrite 函数可以对数据进行成块读写，但并不是说一次想读写多少数据就能全部读写多少数据，毕竟缓存有限，而且不同的操作系统的缓存大小也可能不一样。同时，许多程序员还认为函数的参数 (size、count) 与位置对齐有关，甚至认为语句“fwrite(ptr,1,1024,fp)”的执行效率会比“fwrite(ptr,1024,1,fp)”高。实际情况并非如此，如在 glibc-2.17 库中对 fwrite 函数的实现如下：
_IO_size_t _IO_fwrite (const void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)
{
    _IO_size_t request = size * count;
    _IO_size_t written = 0;
    CHECK_FILE (fp, 0);
    if (request == 0)
        return 0;
    _IO_acquire_lock (fp);
    if (_IO_vtable_offset (fp) != 0 || _IO_fwide (fp, -1) == -1)
        written = _IO_sputn (fp, (const char *0 buf, request);
    _IO_release_lock (fp);
    if (written == request)
        return count;
    else if (written == EOF)
        return 0;
    else
        return written / size;
}
从上面的 fwrite 函数源码实现中可以清楚地看到：

首先，在把参数 size 与 count 传进函数之后，第一步就是通过语句“_IO_size_t request=size*count;”来计算“size*count”，所以这两个参数与什么位置对齐根本没有半点关系。

其次，在函数返回时，如果整个写入成功（“written==request”），就返回 count；如果遇到 EOF(“written==EOF”)，就返回 0；否则返回“written/size”。由此可见，函数返回的是成功写入的块数，而不是字节数（除非 size 为 1），这样做有许多好处。例如，在写入多个结构体时，返回值能告诉你成功写入的结构体的个数。当然，这样看来，前面的“fwrite(ptr,1,1024,fp)”与“fwrite(ptr,1024,1,fp)”语句还是有所差别的。但是，如果调用者只关心是否全部写入成功，那么就完全没必要纠结于语句“fwrite(ptr,1,1024,fp)”与“fwrite(ptr,1024,1,fp)”之间的差别了。

对于 fread 函数，其道理与 fwrite 函数完全一样，如下面的函数源代码所示：
_IO_size_t _IO_fread (void *buf,_IO_size_t size,_IO_size_t count,_IO_FILE *fp)
{
    _IO_size_t bytes_requested = size * count;
    _IO_size_t bytes_read;
    CHECK_FILE (fp, 0);
    if (bytes_requested == 0)
        return 0;
    _IO_acquire_lock (fp);
    bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);
    _IO_release_lock (fp);
    return bytes_requested == bytes_read ？ count : bytes_read / size;
}
除此之外，函数 fwrite 还与文件的打开模式有关。例如，如果文件的打开模式是“w+”，则是从文件指针指向的地址开始写，替换掉之后的内容，文件的长度可以不变，fp 的位置移动 count 个数；如果文件的打开模式为“a+”，则从文件的末尾开始添加，文件的长度会不断增加。



C语言常用字符串及转换函数


C语言字符串函数

函数名: stpcpy 
功   能: 拷贝一个字符串到另一个 
用   法: char *stpcpy(char *destin, char *source); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char string[10]; 
    char *str1 = "abcdefghi";

    stpcpy(string, str1); 
    printf("%s/n", string); 
    return 0; 
} 
  

函数名: strcat 
功   能: 字符串拼接函数 
用   法: char *strcat(char *destin, char *source); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char destination[25]; 
    char *blank = " ", *c = "C++", *Borland = "Borland";

    strcpy(destination, Borland); 
    strcat(destination, blank); 
    strcat(destination, c);

    printf("%s/n", destination); 
    return 0; 
} 
  

函数名: strchr 
功   能: 在一个串中查找给定字符的第一个匹配之处/ 
用   法: char *strchr(char *str, char c); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
     char string[15]; 
     char *ptr, c = 'r';

     strcpy(string, "This is a string"); 
     ptr = strchr(string, c); 
     if (ptr) 
        printf("The character %c is at position: %d/n", c, ptr-string); 
     else 
        printf("The character was not found/n"); 
     return 0; 
} 
  

函数名: strcmp 
功   能: 串比较 
用   法: int strcmp(char *str1, char *str2); 
看Asic码，str1>str2，返回值 > 0；两串相等，返回0
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
     char *buf1 = "aaa", *buf2 = "bbb", *buf3 = "ccc"; 
     int ptr;

     ptr = strcmp(buf2, buf1); 
     if (ptr > 0) 
        printf("buffer 2 is greater than buffer 1/n"); 
     else 
        printf("buffer 2 is less than buffer 1/n");

     ptr = strcmp(buf2, buf3); 
     if (ptr > 0) 
        printf("buffer 2 is greater than buffer 3/n"); 
     else 
        printf("buffer 2 is less than buffer 3/n");

     return 0; 
} 
  

函数名: strncmpi 
功   能: 将一个串中的一部分与另一个串比较, 不管大小写 
用   法: int strncmpi(char *str1, char *str2, unsigned maxlen); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *buf1 = "BBB", *buf2 = "bbb"; 
    int ptr;

    ptr = strcmpi(buf2, buf1);

    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n");

    if (ptr < 0) 
       printf("buffer 2 is less than buffer 1/n");

    if (ptr == 0) 
       printf("buffer 2 equals buffer 1/n");

    return 0; 
} 
  

函数名: strcpy 
功   能: 串拷贝 
用   法: char *strcpy(char *str1, char *str2); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
     char string[10]; 
     char *str1 = "abcdefghi";

     strcpy(string, str1); 
     printf("%s/n", string); 
     return 0; 
} 
  

函数名: strcspn 
功   能: 在串中查找第一个给定字符集内容的段 
用   法: int strcspn(char *str1, char *str2); 
程序例:

#include <stdio.h> 
#include <string.h> 
#include <alloc.h>

int main(void) 
{ 
     char *string1 = "1234567890"; 
     char *string2 = "747DC8"; 
     int length;

     length = strcspn(string1, string2); 
     printf("Character where strings intersect is at position %d/n", length);

     return 0; 
} 
  

函数名: strdup 
功   能: 将串拷贝到新建的位置处 
用   法: char *strdup(char *str); 
程序例:

#include <stdio.h> 
#include <string.h> 
#include <alloc.h>

int main(void) 
{ 
     char *dup_str, *string = "abcde";

     dup_str = strdup(string); 
     printf("%s/n", dup_str); 
     free(dup_str);

     return 0; 
} 
  

函数名: stricmp 
功   能: 以大小写不敏感方式比较两个串 
用   法: int stricmp(char *str1, char *str2); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *buf1 = "BBB", *buf2 = "bbb"; 
    int ptr;

    ptr = stricmp(buf2, buf1);

    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n");

    if (ptr < 0) 
       printf("buffer 2 is less than buffer 1/n");

    if (ptr == 0) 
       printf("buffer 2 equals buffer 1/n");

    return 0; 
} 

函数名: strerror 
功   能: 返回指向错误信息字符串的指针 
用   法: char *strerror(int errnum); 
程序例:

#include <stdio.h> 
#include <errno.h>

int main(void) 
{ 
    char *buffer; 
    buffer = strerror(errno); 
    printf("Error: %s/n", buffer); 
    return 0; 
} 
  

函数名: strcmpi 
功   能: 将一个串与另一个比较, 不管大小写 
用   法: int strcmpi(char *str1, char *str2); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *buf1 = "BBB", *buf2 = "bbb"; 
    int ptr;

    ptr = strcmpi(buf2, buf1);

    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n");

    if (ptr < 0) 
       printf("buffer 2 is less than buffer 1/n");

    if (ptr == 0) 
       printf("buffer 2 equals buffer 1/n");

    return 0; 
} 
  

函数名: strncmp 
功   能: 串比较 
用   法: int strncmp(char *str1, char *str2, int maxlen); 
程序例:

#include <string.h> 
#include <stdio.h>

int   main(void)

{ 
    char *buf1 = "aaabbb", *buf2 = "bbbccc", *buf3 = "ccc"; 
    int ptr;

    ptr = strncmp(buf2,buf1,3); 
    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n"); 
    else 
       printf("buffer 2 is less than buffer 1/n");

    ptr = strncmp(buf2,buf3,3); 
    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 3/n"); 
    else 
       printf("buffer 2 is less than buffer 3/n");

    return(0); 
} 

函数名: strncmpi 
功   能: 把串中的一部分与另一串中的一部分比较, 不管大小写 
用   法: int strncmpi(char *str1, char *str2); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *buf1 = "BBBccc", *buf2 = "bbbccc"; 
    int ptr;

    ptr = strncmpi(buf2,buf1,3);

    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n");

    if (ptr < 0) 
       printf("buffer 2 is less than buffer 1/n");

    if (ptr == 0) 
       printf("buffer 2 equals buffer 1/n");

    return 0; 
} 

函数名: strncpy 
功   能: 串拷贝 
用   法: char *strncpy(char *destin, char *source, int maxlen); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char string[10]; 
    char *str1 = "abcdefghi";

    strncpy(string, str1, 3); 
    string[3] = '/0'; 
    printf("%s/n", string); 
    return 0; 
} 

函数名: strnicmp 
功   能: 不注重大小写地比较两个串 
用   法: int strnicmp(char *str1, char *str2, unsigned maxlen); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *buf1 = "BBBccc", *buf2 = "bbbccc"; 
    int ptr;

    ptr = strnicmp(buf2, buf1, 3);

    if (ptr > 0) 
       printf("buffer 2 is greater than buffer 1/n");

    if (ptr < 0) 
       printf("buffer 2 is less than buffer 1/n");

    if (ptr == 0) 
       printf("buffer 2 equals buffer 1/n");

    return 0; 
} 
  

函数名: strnset 
功   能: 将一个串中的所有字符都设为指定字符 
用   法: char *strnset(char *str, char ch, unsigned n); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char *string = "abcdefghijklmnopqrstuvwxyz"; 
    char letter = 'x';

    printf("string before strnset: %s/n", string); 
    strnset(string, letter, 13); 
    printf("string after   strnset: %s/n", string);

    return 0; 
} 

函数名: strpbrk 
功   能: 在串中查找给定字符集中的字符 
用   法: char *strpbrk(char *str1, char *str2); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char *string1 = "abcdefghijklmnopqrstuvwxyz"; 
    char *string2 = "onm"; 
    char *ptr;

    ptr = strpbrk(string1, string2);

    if (ptr) 
       printf("strpbrk found first character: %c/n", *ptr); 
    else 
       printf("strpbrk didn't find character in set/n");

    return 0; 
} 
  

函数名: strrchr 
功   能: 在串中查找指定字符的最后一个出现 
用   法: char *strrchr(char *str, char c); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char string[15]; 
    char *ptr, c = 'r';

    strcpy(string, "This is a string"); 
    ptr = strrchr(string, c); 
    if (ptr) 
       printf("The character %c is at position: %d/n", c, ptr-string); 
    else 
       printf("The character was not found/n"); 
    return 0; 
} 
  

函数名: strrev 
功   能: 串倒转 
用   法: char *strrev(char *str); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char *forward = "string";

    printf("Before strrev(): %s/n", forward); 
    strrev(forward); 
    printf("After strrev():   %s/n", forward); 
    return 0; 
}

函数名: strset 
功   能: 将一个串中的所有字符都设为指定字符 
用   法: char *strset(char *str, char c); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char string[10] = "123456789"; 
    char symbol = 'c';

    printf("Before strset(): %s/n", string); 
    strset(string, symbol); 
    printf("After strset():   %s/n", string); 
    return 0; 
} 
  

函数名: strspn 
功   能: 在串中查找指定字符集的子集的第一次出现 
用   法: int strspn(char *str1, char *str2); 
程序例:

#include <stdio.h> 
#include <string.h> 
#include <alloc.h>

int main(void) 
{ 
    char *string1 = "1234567890"; 
    char *string2 = "123DC8"; 
    int length;

    length = strspn(string1, string2); 
    printf("Character where strings differ is at position %d/n", length); 
    return 0; 
} 

函数名: strstr 
功   能: 在串中查找指定字符串的第一次出现 
用   法: char *strstr(char *str1, char *str2); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char *str1 = "Borland International", *str2 = "nation", *ptr;

    ptr = strstr(str1, str2); 
    printf("The substring is: %s/n", ptr); 
    return 0; 
} 

函数名: strtod 
功   能: 将字符串转换为double型值 
用   法: double strtod(char *str, char **endptr); 
程序例:

#include <stdio.h> 
#include <stdlib.h>

int main(void) 
{ 
    char input[80], *endptr; 
    double value;

    printf("Enter a floating point number:"); 
    gets(input); 
    value = strtod(input, &endptr); 
    printf("The string is %s the number is %lf/n", input, value); 
    return 0; 
} 
  

函数名: strtok 
功   能: 查找由在第二个串中指定的分界符分隔开的单词 
用   法: char *strtok(char *str1, char *str2); 
程序例:

#include <string.h> 
#include <stdio.h>

int main(void) 
{ 
    char input[16] = "abc,d"; 
    char *p;

    /* strtok places a NULL terminator 
    in front of the token, if found */ 
    p = strtok(input, ","); 
    if (p)    printf("%s/n", p);

    /* A second call to strtok using a NULL 
    as the first parameter returns a pointer 
    to the character following the token   */ 
    p = strtok(NULL, ","); 
    if (p)    printf("%s/n", p); 
    return 0; 
} 
  

函数名: strtol 
功   能: 将串转换为长整数 
用   法: long strtol(char *str, char **endptr, int base); 
程序例:

#include <stdlib.h> 
#include <stdio.h>

int main(void) 
{ 
    char *string = "87654321", *endptr; 
    long lnumber;

    /* strtol converts string to long integer   */ 
    lnumber = strtol(string, &endptr, 10); 
    printf("string = %s   long = %ld/n", string, lnumber);

    return 0; 
}

函数名: strupr 
功   能: 将串中的小写字母转换为大写字母 
用   法: char *strupr(char *str); 
程序例:

#include <stdio.h> 
#include <string.h>

int main(void) 
{ 
    char *string = "abcdefghijklmnopqrstuvwxyz", *ptr;

    /* converts string to upper case characters */ 
    ptr = strupr(string); 
    printf("%s/n", ptr); 
    return 0; 
} 
  

函数名: swab 
功   能: 交换字节 
用   法: void swab (char *from, char *to, int nbytes); 
程序例:

#include <stdlib.h> 
#include <stdio.h> 
#include <string.h>

char source[15] = "rFna koBlrna d"; 
char target[15];

int main(void) 
{ 
    swab(source, target, strlen(source)); 
    printf("This is target: %s/n", target); 
    return 0; 
}

常用类型转换函数

原文：http://hi.baidu.com/javaee_pro/blog/item/be47f66313ada4670c33fa84.html

一、atof（将字符串转换成浮点型数）
定义函数
      double atof(const char *nptr);
函数说明
      atof()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束符("/0")才结束转换，并将结果返回。参数nptr字符串可包含正负号、小数点或E(e)来表示指数部分，如123.456或123e-2。
返回值
      返回转换后的浮点型数。
附加说明
      atof()与使用strtod(nptr,(char**)NULL)结果相同。
范例
      /* 将字符串a 与字符串b转换成数字后相加*/
#include<stdlib.h>
main()
{
char *a=”-100.23”;
char *b=”200e-2”;   //2
float c;
c=atof(a)+atof(b);
printf(“c=%.2f ”,c);
}
执行
      c=-98.23

/*******************************************************/
二、atoi（将字符串转换成整型数）
定义函数
      int atoi(const char *nptr);
函数说明
      atoi()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时('/0')才结束转换，并将结果返回。
返回值
      返回转换后的整型数。
附加说明
      atoi()与使用strtol(nptr，(char**)NULL，10)；结果相同。
范例
      /* 将字符串a 与字符串b转换成数字后相加*/
#include<stdlib.h>
mian()
{
char a[]=”-100”;
char b[]=”456”;
int c;
c=atoi(a)+atoi(b);
printf(c=%d ”,c);
}
执行
      c=356

/*******************************************************/
三、atol（将字符串转换成长整型数）
定义函数
      long atol(const char *nptr);
函数说明
      atol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时('/0')才结束转换，并将结果返回。
返回值
      返回转换后的长整型数。
附加说明
      atol()与使用strtol(nptr,(char**)NULL,10)；结果相同。
范例
      /*将字符串a与字符串b转换成数字后相加*/
#include<stdlib.h>
main()
{
char a[]=”1000000000”;
char b[]=” 234567890”;
long c;
c=atol(a)+atol(b);
printf(“c=%d ”,c);
}
执行
      c=1234567890

/*******************************************************/
四、gcvt（将浮点型数转换为字符串，取四舍五入）
定义函数
      char *gcvt(double number，size_t ndigits，char *buf);
函数说明
      gcvt()用来将参数number转换成ASCII码字符串，参数ndigits表示显示的位数。gcvt()与ecvt()和fcvt()不同的地方在于，gcvt()所转换后的字符串包含小数点或正负符号。若转换成功，转换后的字符串会放在参数buf指针所指的空间。
返回值
      返回一字符串指针，此地址即为buf指针。
附加说明
     
范例
      #include<stdlib.h>
main()
{
double a=123.45;
double b=-1234.56;
char *ptr;
int decpt,sign;
gcvt(a,5,ptr);
printf(“a value=%s ”,ptr);
ptr=gcvt(b,6,ptr);
printf(“b value=%s ”,ptr);
}
执行
      a value=123.45
b value=-1234.56


/*******************************************************/     
五、strtod（将字符串转换成浮点数）
定义函数
      double strtod(const char *nptr,char **endptr);
函数说明
      strtod()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，到出现非数字或字符串结束时('/0')才结束转换，并将结果返回。
      若endptr不为NULL，则会 将遇到不合条件而终止的nptr中的字符指针由endptr传回。参数nptr字符串可包含正负号、小数点或E(e)来表示指数部分。如123.456或123e-2。
返回值
      返回转换后的浮点型数。
附加说明
      参考atof()。
范例
#include <stdlib.h>
#include <stdio.h>

void main( void )
{
    char    *string, *stopstring;
    double x;
    long    l;
    int     base;
    unsigned long ul;
    string = "3.1415926This stopped it";
    x = strtod( string, &stopstring );
    printf( "string = %s/n", string );
    printf("    strtod = %f/n", x );
    printf("    Stopped scan at: %s/n/n", stopstring );
    string = "-10110134932This stopped it";
    l = strtol( string, &stopstring, 10 );
    printf( "string = %s", string );
    printf("    strtol = %ld", l );
    printf("    Stopped scan at: %s", stopstring );
    string = "10110134932";
    printf( "string = %s/n", string );
    /* Convert string using base 2, 4, and 8: */
    for( base = 2; base <= 8; base *= 2 )
    {
       /* Convert the string: */
       ul = strtoul( string, &stopstring, base );
       printf( "    strtol = %ld (base %d)/n", ul, base );
       printf( "    Stopped scan at: %s/n", stopstring );
    }
}


Output
string = 3.1415926This stopped it
      strtod = 3.141593
      Stopped scan at: This stopped it

string = -10110134932This stopped it      strtol = -2147483647      Stopped scan at: This stopped itstring = 10110134932
      strtol = 45 (base 2)
      Stopped scan at: 34932
      strtol = 4423 (base 4)
      Stopped scan at: 4932
      strtol = 2134108 (base 8)
      Stopped scan at: 932
/*******************************************************/
六、strtol（将字符串转换成长整型数）
定义函数
      long int strtol(const char *nptr,char **endptr,int base);
函数说明
      strtol()会将参数nptr字符串根据参数base来转换成长整型数。参数base范围从2至36，或0。 参数base代表采用的进制方式，如 base值为10则采用10进制，若base值为16则采用16进制等。当base值为0时则是采用10进制做转换，但遇到如'0x'前置字符则会使用 16进制做转换。一开始strtol()会扫描参数nptr字符串，跳过前面的空格字符，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束 时('')结束转换，并将结果返回。若参数endptr不为NULL，则会将遇到不合条件而终止的nptr中的字符指针由endptr返回。
返回值
      返回转换后的长整型数，否则返回ERANGE并将错误代码存入errno中。
附加说明
      ERANGE指定的转换字符串超出合法范围。
范例
      /* 将字符串a，b，c 分别采用10，2，16进制转换成数字*/
#include<stdlib.h>
main()
{
char a[]=”1000000000”;
char b[]=”1000000000”;
char c[]=”ffff”;
printf(“a=%d ”,strtol(a,NULL,10));
printf(“b=%d ”,strtol(b,NULL,2));
printf(“c=%d ”,strtol(c,NULL,16));
}
执行
      a=1000000000
b=512
c=65535

/*******************************************************/     
七、strtoul（将字符串转换成无符号长整型数）
定义函数
      unsigned long int strtoul(const char *nptr,char **endptr,int base);
函数说明
      strtoul()会将参数nptr字符串根据参数base来转换成无符号的长整型数。 参数base范围从2至36，或0。参数base代表采用的进制方式，如base值为10则��用10进制，若base值为16则采用16进制数等。当 base值为0时则是采用10进制做转换，但遇到如'0x'前置字符则会使用16进制做转换。一开始strtoul()会扫描参数nptr字符串，跳过前 面的空格字符串，直到遇上数字或正负符号才开始做转换，再遇到非数字或字符串结束时('')结束转换，并将结果返回。若参数endptr不为NULL，则 会将遇到不合条件而终止的nptr中的字符指针由endptr返回。
返回值
      返回转换后的长整型数，否则返回ERANGE并将错误代码存入errno中。
附加说明
      ERANGE指定的转换字符串超出合法范围。
范例
      参考strtol()

/*******************************************************/     
八、toascii（将整型数转换成合法的ASCII 码字符）
表头文件
      #include<ctype.h>
定义函数
      int toascii(int c)
函数说明
      toascii()会将参数c转换成7位的unsigned char值，第八位则会被清除，此字符即会被转成ASCII码字符。
返回值
      将转换成功的ASCII码字符值返回。
范例
      #include<stdlib.h>
main()
{
int a=217;
char b;
printf(“before toascii () : a value =%d(%c) ”,a,a);
b=toascii(a);
printf(“after toascii() : a value =%d(%c) ”,b,b);
}
执行
      before toascii() : a value =217()
after toascii() : a value =89(Y)

/*******************************************************/     
九、tolower（将大写字母转换成小写字母）
定义函数
      int tolower(int c);
函数说明
      若参数c为大写字母则将该对应的小写字母返回。
返回值
      返回转换后的小写字母，若不须转换则将参数c值返回。

cos²x-sin²x=cos2x=1-2sin²x

归并排序
#include <stdlib.h>
#include <stdio.h>
 
void Merge(int sourceArr[],int tempArr[], int startIndex, int midIndex, int endIndex)
{
    int i = startIndex, j=midIndex+1, k = startIndex;
    while(i!=midIndex+1 && j!=endIndex+1)
    {
        if(sourceArr[i] > sourceArr[j])
            tempArr[k++] = sourceArr[j++];
        else
            tempArr[k++] = sourceArr[i++];
    }
    while(i != midIndex+1)
        tempArr[k++] = sourceArr[i++];
    while(j != endIndex+1)
        tempArr[k++] = sourceArr[j++];
    for(i=startIndex; i<=endIndex; i++)
        sourceArr[i] = tempArr[i];
}
 
//内部使用递归
void MergeSort(int sourceArr[], int tempArr[], int startIndex, int endIndex)
{
    int midIndex;
    if(startIndex < endIndex)
    {
        midIndex = startIndex + (endIndex-startIndex) / 2;//避免溢出int
        MergeSort(sourceArr, tempArr, startIndex, midIndex);
        MergeSort(sourceArr, tempArr, midIndex+1, endIndex);
        Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);
    }
}
 
int main(int argc, char * argv[])
{
    int a[8] = {50, 10, 20, 30, 70, 40, 80, 60};
    int i, b[8];
    MergeSort(a, b, 0, 7);
    for(i=0; i<8; i++)
        printf("%d ", a[i]);
    printf("\n");
    return 0;
}

下列的哪个赋值语句是不正确的

A．float f = 11.1；
B．double d = 5.3E12；
C．float d=3.14f；
D．double f = 11.1E10f；

正确答案
A

答案解析
解析：浮点型数的赋值，带有小数点的数字缺省是double型的，如果在浮点数后面加f或者F则是float，后面加d或者D则是double，科学计数法形式的浮点数也是double型的，而double的精度比float高，将一个高精度的double赋值给一个低精度的float时需要进行强制类型转换，反之则不需要。

C语言，double型和float型，赋值怎么赋值的，比如3，怎么赋值？还有可不可以float
C语言，double型和float型，赋值怎么赋值的，比如3，怎么赋值？还有可不可以float a=3？系统是不是自动转化成小数点的

可以的，float a=3的话，编译器会把3自动转化为float型
追问
那float型具体这一次吧，标准的，还有把double也写一遍，书中double a=3.0为什么double是这么写？那3.333怎么写
追答
默认的小数都是double型的，float a = 3.0;和float a = 3；都是没有问题的，但是第一个会有警告，因为小数默认是double型，将double赋值给float会有截位现象，如果非要说一个正确的赋值的话你可以用%f直接输入给float赋值，也可以使用这种的方式赋值:float a = (float)3.0;这样就不会有警告了。
double的话比较简单，直接赋值就可以了，double b = 4.0;

VC++环境下连续自增(自减)运算规则 i++ ++i
2013年06月27日 23:24:55 chenbang110 阅读数：1350更多
个人分类： Linux c/c++ 面试/工作
版权声明：本文为博主原创文章，未经博主允许不得转载。	https://blog.csdn.net/chenbang110/article/details/9192595
VC++环境下连续自增(自减)运算规则
1、        在一般表达式中和在函数参数中计算的结果相同(这一点与Turbo C环境不同)；
2、        后缀：同表达式中Turbo C的情况相同：先统一取值后依次自增，如：
int a,i=5;  a=i+++i+++i++; a=15, i=8.
3、        前缀：对整型，前两个自增同Turbo C，即依次自增后统一取值，后面的每个自增后即
取值，如：
   int a, i=5;  a= ++i +(++i)+(++i);  a=22, i=8.
          对实型，每个自增后即取值，如：
float  a, i=5;  a= ++i +(++i)+(++i);  a=21, i=8.
4、        前后缀混合的情况：
(1)        一般情况：表达式中自左向右计算，参数自右向左运算。前缀自增后取值；后缀（或变量）取值依其所处位置而定，有连续多个将统一取值，其自增在语句结束前进行。
(2)        前后缀各有一个的情况：设int i=5; 由于i++*++i应满足交换率与++i*i++相同，规定按后者计算故为36。实验2内容4：int i=5; printf("%d,%d\n", --i, i++*++i ); 打印5，36。
(3)        若i++或++i或两者有多于一个的情况：++i有两个以上在一起时最左边的连续自增同3、，其余每个自增后取值，

如：int i=5;

printf("%d\n%d\n",--i,(++i)+(i++)+(i++)+(++i)); 打印9 - 1 = 8和6 + 6 + 6 + 7 ＝ 25
printf("%d\n%d\n",--i,(++i)+(++i)+(++i)+(++i)+(i++)); 打印9-1 = 8和7 + 7 + 8 + 9 + 9 = 40
printf("%d\n%d\n",--i,(++i)+(++i)+(++i)+i+(++i)+(++i)); 打印10-1 = 9和 7 + 7 + 8 + 8 + 9 + 10 = 49
(4)        函数参数中有括号时，括号参数优先计算，其余参数仍自右向左计算，如：
int i=9,j=8; printf("%d  %d\n", (++i, j--), ++i); 打印8  11
         printf("%d  %d  %d\n", (++i, j--), ++i, i); 打印8  11  10
(5)        最后i的值等于原值加总自增次数减自减的次数

使用fread读取二进制文件时，一定打开的时候使用‘rb’，不要只写r
2011年12月27日 20:43:51 cattylll 阅读数：3485
调了那么久，其实就是fopen时候不能只写‘r’，还要写‘rb’。

不然会造成fread读不完指定的字节数。。。



也就是说如果是linux上的程序，r和rb没有什么区别，
如果这段代码放到windows上，就不灵了。

r遇到0x0d后面没有0x0a会自动加一个，遇到0x1a会忽略后面的内容
rb不会

r 读到\r\n会改为\n,读到\x1a会返回EOF
rb 读到什么返回什么,读到文件末尾才会返回EOF

怪不得大牛的代码在linux下没问题，我的差不多的在windows下编译就有问题。

每日一练哈:
1.C语言中，数组和指针的区别？
2.break和continue的区别，以及while和do-while语句的区别?
3.void main（）能够带几个参数，各代表什么？

C语言strtok()函数：字符串分割

头文件：#include <string.h>

定义函数：char * strtok(char *s, const char *delim);

函数说明：strtok()用来将字符串分割成一个个片段。参数s 指向欲分割的字符串，参数delim 则为分割字符串，当strtok()在参数s 的字符串中发现到参数delim 的分割字符时则会将该字符改为\0 字符。在第一次调用时，strtok()必需给予参数s 字符串，往后的调用则将参数s 设置成NULL。每次调用成功则返回下一个分割后的字符串指针。

返回值：返回下一个分割后的字符串指针，如果已无从分割则返回NULL。

范例
#include <string.h>
main(){
    char s[] = "ab-cd : ef;gh :i-jkl;mnop;qrs-tu: vwx-y;z";
    char *delim = "-: ";
    char *p;
    printf("%s ", strtok(s, delim));
    while((p = strtok(NULL, delim)))
        printf("%s ", p);
        printf("\n");
}

执行结果：
ab cd ef;gh i jkl;mnop;qrs tu vwx y;z     //－与:字符已经被\0 字符取代

面试官很喜欢让求职者写一些常用库函数的实现，有很多是和字符串相关的，有一些是关于内存拷贝的。一般，常会让写的函数有以下几个：

strcpy ， strncpy， memcpy。

memset一般不会让去写，但这个函数也很有特点，有很多容易用错的地方。一并总结吧。

1.  strcpy

strcpy函数的原型是：

char * strcpy（char* dest, const char* src)

strcpy的实现经常要注意的细节是：

（1）判断地址是否为空，个人感觉可以使用断言

（2）参数只有两个地址，没有拷贝的长度。拷贝到'\0‘时就会终止，要保证最终dest末尾是'\0'。

（3）要保证目标字串的长度足够，能够容纳原串的长度。

（4）因为拷贝是dest会移动，而最终要返回的是拷贝后字符串的起始地址，因此要先保存dest的地址，便于最终返回。

          在实现这一点时，有两种方法。 char* temp=dest; 拷贝时移动dest返回temp，或者拷贝时移动temp返回dest，不知道哪个是对的。感觉两个都是没有问题的

 其中一种实现方式：

[cpp] view plaincopy

char* mystrcpy(char* dest,const char* src)  
{  
    assert(dest!=NULL && src!=NULL);  
  
    char* temp=dest;  
  
    while((*temp++ = *src++ )!='\0')  
    {}  
  
    return dest;  
}  

2. strncpy

strncpy的功能和strcpy相似，只是它复制时多了一个终止条件。即是未遇到原串的'\0’，如果已经复制了n个字符（n为提供的参数长度），复制同样会终止。

strcpy的实现要注意的细节也基本适用于strncpy的实现。

 

实现方式：

[cpp] view plaincopy

char* mystrncpy(char* dest, const char* src, int len)  
{  
    assert(dest!=NULL && src!=NULL);  
  
    char* temp=dest;  
    int i=0;  
  
    while(i++ < len  && (*temp++ = *src++)!='\0')  
    {}  
  
    if(*(--temp)!='\0')  
        *temp='\0';  
  
    return dest;  
}  
[cpp] view plaincopy

注意：刚开始我写strncpy的实现时，把while(i++ < len && (*temp++ = *src++)!='\0')写成了while( (*temp++ = *src++)!='\0' && i++ < len); 导致最后多复制了一个字符，明白为什么吧。。  
 

3. memcpy

memcpy和strncpy有些类似，但也有本质的不同。

（1）strncpy只能复制字符串，但memcpy对类型没有要求。

（2）strncpy有两个终止条件，memcpy只有一个终止条件，那就是复制n个字节。（n是memcpy的第三个参数）

（3）要特别注意目的地址和源地址重合的问题，拷贝前要加以判断。

（4）实现这个函数时一般要把原来的指针类型转换成char*，这样每次移动都是一个字节。

 

实现方式：（考虑了两个地址空间是否会有重叠）

[cpp] view plaincopy

void* mymemcpy(void* dest, void* src, int len)  
{  
    int i=0;  
    char* tempdest=(char*)dest;  
    char* tempsrc=(char*)src;  
  
    if(tempdest<tempsrc || tempdest>(tempsrc+len-1))  
    {  
        while(i<len)  
        {  
            *tempdest++ = *tempsrc++;  
            i++;  
        }  
    }  
    else  
    {  
        tempdest+=len;  
        tempsrc+=len;  
        i=len;  
        while(i>0)  
        {  
            *tempdest-- = *tempsrc--;  
            i--;  
        }  
    }  
    return dest;  
}  
注意，memcpy是对内存的拷贝，对其他安全性不做考虑。用户在使用这个函数时要小心，比如用它来拷贝字符串（当然如果是字符串拷贝肯定是用strncpy）就要注意末尾的\0字符之类的。

4. memset

memset函数的原型是：

void *memset(void *s, int ch, size_t n)

作用是把s所指向的地址开始的n个字节的内容全部置位ch所指定的ASCII值。

一般经常用memset对某段内存空间置零。

 

经常会出现的一个问题：在C++中，为什么不提倡在构造函数中使用：memset(this,0,sizeof(*this))

原因： 在C++中，如果类中都是基本类型的数据成员并且没有虚函数和虚继承的话，使用memset这样用到没有太多影响。

如果有虚函数，memset会把虚表指针等全部置零，对类会产生破坏。

如何通过ftell和fseek来获取文件大小
复制代码
 1 #include <stdio.h> 
 2 int main () 
 3    { 
 4         FILE * pFile=NULL; 
 5     long size; 
 6     pFile = fopen ("myfile.txt","rb"); 
 7     if (pFile==NULL) perror ("Error opening file"); 
 8     else
 9         { 
10     fseek (pFile, 0, SEEK_END);
11     size=ftell (pFile); 
12     fclose (pFile);
13     pFile=NULL;
14      printf ("Size of myfile.txt is: %ld bytes.\n",size); 
15          } 
16     return 0; 
17      }
复制代码
　　首先利用fseek(pfile,0,SEEK_END)将文件的当前位置移到文件的末尾，然后调用函数ftell()获得当前位置相对于文件首的位移，该位移值就等于文件所含字节数。这样就得到文件大小了！

    fseek(重定位流上的文件指针)

    int fseek(FILE *stream, long offset, int fromwhere);

    函数说明：第一个参数stream为文件指针，  第二个参数offset为偏移量，整数表示正向偏移，负数表示负向偏移  第三个参数fromwhere设定从文件的哪里开始偏移,可能取值为：SEEK_CUR（当前位置）、 SEEK_END（文件结尾）或 SEEK_SET（文件开头）， 其中SEEK_SET,SEEK_CUR和SEEK_END的值依次为0，1和2。
   例如：
fseek(fp,100L,0);把fp指针移动到离文件开头100字节处；

   返回值: 成功，返回0，否则返回其他值。

   ftell(返回当前文件位置)

   long ftell(FILE *stream)

   函数说明：用于得到文件位置指针当前位置相对于文件首的偏移字节数。

唐老师的元素交换一定要用指针--程序题时

strrev函数不常用，不过在进行数制转换和加密等场合还是有机会用到，因为一些针对嵌入式平台的编译器和VC对它提供了支持。对于不支持strrev函数的编译器，许多网友提供了不少很有价值的解决方案，不过直接从VC所提供的源代码中去提炼，似乎更能够兼顾效率和移植性，以下提供一份经典的实现代码：

char* strrev(char* s)
{
    /* h指向s的头部 */
    char* h = s;    
    char* t = s;
    char ch;
 
    /* t指向s的尾部 */
    while(*t++){};
    t--;    /* 与t++抵消 */
    t--;    /* 回跳过结束符'\0' */
 
    /* 当h和t未重合时，交换它们所指向的字符 */
    while(h < t)
    {
        ch = *h;
        *h++ = *t;    /* h向尾部移动 */
        *t-- = ch;    /* t向头部移动 */
    }
 
    return(s);

}

C函数库中的strrchr实现

/*
*copyright@nciaebupt 转载请注明出处
*原型：extern char *strrchr(char *s,char c);
*用法：#include <string.h>
*功能：查找字符串s中最后一次出现字符c的位置
*说明：返回最后一次出现c的位置的指针，如果s中不存在c则返回NULL。
*使用C函数库中的strrchr
*/
#include <cstdio>
#include <cstring>
 
int main(int args,char ** argv)
{
    char str[] = "This is a sample string";
    char *pch;
    pch = strrchr(str,'s');
    printf("The last occurence of 's' found at : %d",pch - str + 1);
 
    getchar();
    return 0;
}
 
/*
*copyright@nciaebupt 转载请注明出处
*原型：char *strrchr(const char *s,int ch);
*用法：#include <string.h>
*功能：查找字符串s中最后一次出现字符c的位置
*说明：返回最后一次出现c的位置的指针，如果s中不存在c则返回NULL。
*自己实现strrchr
*/
#include <cstdio>
 
char * _strrchr(const char * str,int ch)
{
    char * start = (char *)str;
    while(*str++)/*get the end of the string*/
        ;
    while(--str != start && *str != (char)ch)
        ;
    if(*str == (char)ch)
        return((char *)str);
    return NULL;
 
}
 
int main(int args,char ** argv)
{
    char str[] = "This is a sample string";
    char *pch;
    pch = _strrchr(str,'s');
    printf("The last occurence of 's' found at : %d",pch - str + 1);
 
    getchar();
    return 0;
}


fwrite与fprintf区别、printf与fprintf区别

C语言把文件看作一个字符（字节）的序列，即由一个一个字符（字节）的数据顺序组成。根据数据的组织形式，可分为ASCII文件和二进制文件。ASCII文件又称为文本（text）文件，它的每个字节放一个ASCII代码，代表一个字符。二进制文件是把内存中的数据按其在内在中的存储形式原样输出到磁盘上存放。
1、fprintf(fp, "%d", buffer); 是将格式化的数据写入文件
fprintf(文件指针,格式字符串,输出表列);

fwrite(&buffer, sizeof(int), 1, fp);是以二进位位方式写入文件
fwrite(数据，数据类型大小（字节数），写入数据的最大数量，文件指针);

由于fprintf写入时，对于整数来说，一位占一个字节，比如1，占1个字节；10，占2个字节；100，占3个字节，10000，占5个字节
所以文件的大小会随数据的大小而改变，对大数据空间占用很大。
而fwrite是按二进制写入，所以写入数据所占空间是根据数据类型来确定，比如int的大小为4个字节（一般32位下），那么整数10所占空间为4个字节，100、10000所占空间也是4个字节。所以二进制写入比格式化写入更省空间。

因此，
对于1 2 3 4 5 6 7 8 9 0 十个整数，用fprintf写入时，占10个字节；而用fwrite写入时，占40个字节。
对于100 101 102 103 104 105 106 107 108 109 110 这十个整数，用fprintf写入时，占30个字节；而用fwrite写入时，占40个字节。
对于10000 10100 10200 10300 10400 10500 10600 10700 10800 10900 11000 这十个整数，用fprintf写入时，占50个字节；而用fwrite写入时，还是占40个字节。

fwrite 函数按照指定的数据类型将矩阵中的元素写入到文件中。写二进制文件
其调用格式为：COUNT=fwrite (fid, A, precision)其中COUNT返回所写的数据元素个数，fid为文件句柄，A用来存放写入文件的数据，precision用于控制所写数据的类型，其形式与fread函数相同。
fprintf 写文本文件 函数的调用格式为：COUNT= fprintf(fid, format, A)其中A存放要写入文件的数据。先按format指定的格式将数据矩阵A格式化，然后写入到fid所指定的文件。format用以控制读取的数据格式，由%加上格式符组成，常见的格式符有d，f，c，s。fid为文件句柄。

看如下的例子：

#include <stdio.h>
void main()
{
    int num;
    char name[5];
    FILE *fp;
    if ((fp = fopen("t.txt", "w")) == NULL)
        printf("cannot open file!\n");
   scanf("%d %s",&num,name);
   fprintf(fp, "%d %s", num, name);
   fclose(fp);
 
   if ((fp = fopen("tt.txt", "w")) == NULL)
        printf("cannot open file!\n");
   fwrite(&num, sizeof(int), 1, fp);
   fwrite(name, sizeof(char), 5, fp);
   fclose(fp); 
}
 
输入：100000 liuj
 
t.txt： 100000 liuj    (文件大小：11字节)
 
tt.txt：爢 liuj （乱码，文件大小：9字节）

2、 fprintf() ： 按格式输入到流，

其原型是int fprintf(FILE *stream, const char *format[, argument, ...]);其用法和printf()相同，不过不是写到控制台，而是写到流罢了。

注意的是返回值为此次操作写入到文件的字节数。

如int c = fprintf(fp, "%s %s %d %f", str1,str2, a, b) ;str1：10字节；str2： 10字节；a：2字节；b：8字节，c为33，因为写入时不同的数据间自动加入一个空格。

文件使用之后一定要关闭,否则将不能正确显示内容.fwrite:读入两个学生信息然后用fwrite存入文件

printf函数的一般形式为：
int printf(const char *format,[argument]);
如：printf("the value of printf is:%d",a); //a的值为24

fread与fwrite读取数字或数组

#include <stdio.h>  
int main()  
{  
    FILE* pFile;  
    int num1=20,num2=21;  
    pFile = fopen("myfile.bin" , "wb"); 
    fwrite(&num1 , sizeof(int) , 1 ,pFile);
    fwrite(&num2 ,  sizeof(int) ,1 , pFile); 
    fclose(pFile);

    int n1,n2;
    pFile = fopen("myfile.bin" , "r");  
    fread(&n1 ,  sizeof(int) , 1 ,pFile);
    fread(&n2 ,  sizeof(int) ,1 , pFile);
    printf("%d %d\n", n1,n2);

    fclose(pFile);
    return 0;
}  

#include <stdio.h>  
int main()  
{
    int i;
    FILE* pFile;  
    int arr[5];
    for(i=0; i<5; i++)
    {
        arr[i] = i;
    }
    pFile = fopen("myfile.bin" , "wb"); 
    fwrite(arr, sizeof(int), 5, pFile);
    fclose(pFile);

    int recvarr[5];
    pFile = fopen("myfile.bin" , "r");  
    fread(recvarr,  sizeof(int), 5, pFile);
    for(i=0; i<5; i++)
    {
        printf("%d ",recvarr[i]);
    }  
    fclose(pFile);
    return 0;
}  

例如对整型二维数组a[3][2]赋值
方法一：
在定义的同时赋值
int a[3][2]={0};//所有数组元素均为0
方法二：
int a[3][2]={1,2,3,4,5,6};//常规的赋值方法
方法三：
int a[3][2]={{1,2},{3,4},{5,6}};//分行的赋值方法
方法四：
int a[3][2]={{1,2},{0},{3}};//部分赋值方法，第一行元素的值分别为1，2，第二行元素值都是0，
第三行第一个元素值为3，第二个元素值为0
方法五：
int a[3][2];/先定义
for(i=0;i<=3;i++) //用双重for循环赋值，i，j表示二维数组下标
for(j=0;j<=2;j++)
scanf("%d",&a[i][j]);

转义8进制的确是\ddd的形式，但是因为后面的是22a，在八进制里面是没有a的，所以它只取了两位22；而20题，因为用逗号隔开其实就可以看成是分开写的，所以C选项就相当于
d=9+c;
c++;
d+9;
其中d+9错了

\xhh 任意字符 二位十六进制

假设文件包含10字节，并且你读取了十字节，调用feof函数，函数返回值均为0，这是因为尽管文件指针这时已经指向文件尾了，但是你没有试图越过文件尾读取数据，只有当你尝试了读取第十一个字节时，调用feof，函数才会返回0.

#include <stdio.h>
#include <string.h>

void removeDuplicate(char str[]);
void removeDup(char *str);
void removeDup2(char *str);

int main (void) {
    char name1[] = "aaaabababababababasdbasbdasbdabsdqqq";
    char name2[] = "aaaabababababababasdbasbdasbdabsdqqq";
    char name3[] = "aaaabababababababasdbasbdasbdabsdqqq";
    removeDuplicate(name1);
	removeDup(name2);
	removeDup2(name3);
    printf("name1: %s\n", name1);
    printf("name2: %s\n", name2);
    printf("name3: %s\n", name3);
    return 0;
}

void removeDuplicate(char str[]) {
    int len = strlen(str);
    int p = 0;
    int i;
    int j;
    for (i=0; i<len; i++) {
        if (str[i] != '\0') {
            str[p++] = str[i];
            for (j=i+1; j<len; j++) {
                if (str[i] == str[j]) {
                    str[j] = '\0';
                }
            }
        }
    }
    str[p] = '\0';
}

void removeDup(char *str){
	int len = strlen(str);
	char *p;
	p=str;
	int i, j, q=0;
	for(i=0;i<len; i++) {
		if (*(p+i) != '\0') {
            *(p+q) = *(p+i);
            q++;
            for (j=i+1; j<len; j++) {
                if (*(p+i) == *(p+j)) {
                    *(p+j) = '\0';
                }
            }
        }
	}
	*(p+q)='\0';
}

void removeDup2(char *str){
    int len = strlen(str);
    char *q=str;
    int p = 0;
    int i;
    int j;
    for (i=0; i<len; i++) {
        if (q[i] != '\0') {
            q[p++] = q[i];
            for (j=i+1; j<len; j++) {
                if (q[i] == q[j]) {
                    q[j] = '\0';
                }
            }
        }
    }
    q[p] = '\0';
}
//上面的代码一共出现了3次'\0', 前2次的'\0'没有什么特殊含义, 可以替换成任何在所给字符串中
//不会出现的字符. 最后一个'\0'则是C语言中特有的, 是字符串结束标志.
//就是把所有重复的元素标记成'\0', 那么剩下的元素则是不重复的元素, 通过变量p, 把这些元素重新
//添加到结果字符串中即可.

共用体的概念;

       共用体又叫联合体 关键字为union

   定义：

union 共用体名
{
成员表列
}变量表列;
实例：
      union

     {

             int i;

            char c;

            float b;

    } q，r；

 共用体几个变量互相覆盖。这种几个不同的变量共同占用一段内存的结构

共用体初始化：

      共用体只能初始化成员列表，不能初始化变量列表 如 q={1，‘2’，0.3}是错误的。q.i=2是对的

共用体的引用：

      不能引用共用体变量，而只能引用共用体变量中的成员。
#include <stdio.h>

int main(){
	union {
		int i;
		char c;
	}u={'A'};
	
	printf("%d\n", u.i);
	return 0;
} 
--》65

数值后面加“L”、“l”、“U”、“u”、“H”、“h”，“B”、“b”，数值前面加“0”和“0x”的意义
2018年01月14日 19:08:38 Ruo_Xiao 阅读数：1855
版权声明：本文为博主原创文章，未经博主允许不得转载。	https://blog.csdn.net/itworld123/article/details/79057957
2018-01-14   创建人：Ruo_Xiao
2018-01-15   修改人：Ruo_Xiao
增加对long的说明。
2018-07-14   修改人：Ruo_Xiao
1、增加对数值后面加“H”、“h”、“B”和“b”的说明。
2、对模块进行归类。
1
2
3
4
5
6
一、用于说明数据类型
数值后面加“L”和“l”（小写的l）的意义是该数值是long型。 
详细说如下： 
5L的数据类型为long int。 
5.12L的数据类型为long double。
数值后面加“U”和“u”的意义是该数值是unsigned型。
二、用于说明数值表示方法
数值后面加“”H“、“h”的意义是该数值是用16进制表示的。
数值后面加“”B“、“b”的意义是该数值是用2进制表示的。
后面什么也不加，代表10进制。 
栗子： 
11111111B = FFH = 255
数值前面加“0”的意义是该数值是八进制。
数值前面加“0x”的意义是该数值是十六进制

中缀转后缀表达式 转换的另一种方法
1)先按照运算符的优先级对中缀表达式加括号，变成( ( a+(b*c) ) + ( ((d*e)+f) *g ) )

2)将运算符移到括号的后面，变成((a(bc)*)+(((de)*f)+g)*)+

3)去掉括号，得到abc*+de*f+g*+

当sqr(625)时，
分块查找的平均查找长度ASL取最小值sqr(625)+1,
因为进行分块查找时，可将长度为N的表均匀地分成B块，每块含有S个记录，即有B=N/S，
有等概率的情况下，块内查找的概率为1/S，每块的查找概率为1/B，若按顺序查找确定元素所在的块，则分块查找的平均查找长度为：
ASL（BS）=L（B）+L（S）=（B+1）/2+（S+1）/2=1/2（N/S+S）+1
可以求得当S取sqr(N）时，ASL取最小值sqr(N)+1

c语言用字符数组和字符指针删除相同字符

如何用字符数组和字符指针做参数删除与某字符相同的字符
1.用字符数组
char *DelLetter1(char str1[],char a)   //用字符数组删除
{
	int i = 0;
	int c = 0;
	char *b = (char*)malloc((strlen(str1))*sizeof(char));   //定义动态数组
	for (i = 0; i < (strlen(str1)+1); i++)
	{
		if (str1[i]!=a)                      //把不是指定字符的元素复制进入新的数组
		{
			b[c] = str1[i];   
			c++;
		}
		else {
			continue;
			 }
	}
	return b;                                       //返回新的数组
}
2.用字符指针
char *DelLetter2(char str1[], char a)
{
	char *c = str1;
	char *e = (char*)malloc((strlen(str1)) * sizeof(char));         //定义动态数组
	char *f = e;                                                 //记录新的指针开始值
	while (*c != '\0')
	{
		if (*c != a)					//复制进入新的数组
		{
			*e = *c;
			e++;
		}
		c++;
	}
	return f;                    //返回开始地址


树的遍历方法，及与其对应二叉树的遍历方法的关系。
  树结构有两种次序遍历树的方法：
    1.先根遍历：先访问树的根节点，再依次先根遍历子树；
    2.后根遍历：先依次后根遍历子树，再访问树的根节点。

  不曾看到过树的‘中根遍历’的概念，因为树并不一定是二叉树，‘中’的概念不好定义，比如对于一个拥有3个子树的根节点来说，根节点除了先根和后根两种遍历方式之外还有另外两种次序，如一种次序是先遍历根节点的第一棵子树，再访问根节点，之后再依次遍历剩余子树，另一种次序是，先遍历根节点的前两棵子树，再访问根节点，最后访问第三棵子树。对于拥有更多子树的根节点来说，依次遍历的方法更多。
  树的先根遍历和后根遍历可分别借用对应二叉树的先序遍历和中序遍历实现。以上图（a）中的树和其对应的（d）中的二叉树为例：

    对树进行先根遍历：A B C D

    对树进行后根遍历：B C D A
    对二叉树进行先序遍历：A B C D（与树的先根遍历一致）

    对二叉树进行中序遍历：B C D A（同树的后根遍历）

  接下来说一说森林的遍历方法，及与其对应的二叉树的遍历方法的关系。
  森林的两种遍历方法：
    1.先序遍历森林：
    （1）访问森林中第一棵树的根节点；

    （2）先序遍历第一棵树中根节点的子树森林；

    （3）先序遍历除去第一棵树之后剩余的树构成的森林。
      2.中序遍历森林

            （1）中序遍历森林中第一棵树的根节点的子树森林；

            （2）访问第一棵树的根节点；

            （3）中序遍历除去第一棵树之后剩余的树构成的森林。

  在森林的中序遍历方法中需要注意，森林的中序遍历与二叉树的中序遍历方法的定义不同，二叉树的中序遍历是按照LDR的顺序进行遍历，而森林的中序遍历是要先中序遍历第一棵树的所有子树，再访问这棵树的根节点，对于这棵树来说，根节点的访问次序其实是整棵树遍历的最后（类似于二叉树的后序），这里经常与二叉树的中序遍历混淆，傻傻分不清楚~

  下面，看看森林遍历方法和其对应的二叉树遍历方法的对应关系。当森林转换成二叉树时，其第一棵树的子树森林转换成左子树，剩余树的森林转换成右子树，则森林的先序和中序遍历即对应二叉树的先序和中序遍历。以上图中（a）（b）（c）构成的森林和对应的二叉树（g）为例：

    对森林进行先序遍历：A B C D E F G H I J

    对森林进行中序遍历：B C D A F E H J I G

    对二叉树进行先序遍历：A B C D E F G H I J（与森林先序遍历一致）
    对二叉树进行中序遍历：B C D A F E H J I G(同森林中序遍历)

在顺序表中插入和删除一个结点平均移动多少个结点

解析 
在等概率情况下，顺序表中插入一个结点需要平均移动n/2个结点。删除一个结点需要平均移动（n-1）/2个结点。具体的移动次数取决于顺序表的长度n以及需插入或删除的位置i,i越近n,则所需移动的结点数越少。

用数学归纳法证明:1*n+2*(n-1)+3*(n-2)+...+n*1=1/6*n(n+1)(n+2)?
数学作业帮用户2017-10-19

扫二维码下载作业帮
拍照搜题，秒出答案，一键查看所有搜题记录

优质解答
n=1时,左边=1*1=1
右边=1/6*1*2*3=1
左边=右边,等式成立!
假设n=k时成立 (k>1)即:
1*k+2(k-1)+3(k-2)+…+(k-1)*2+k*1=(1/6)k(k+1)(k+2)
当n=k+1时；
左边
=1*(k+1)+2(k+1-1)+3(k+1-2)+…+(k+1-1)*2+(k+1)*1
=1*k+1*1+2(k-1)+2*1+…+k*1+k+(k+1)
=[1*k+2(k-1)+…+(k-1)*2+k*1]+1+2+3+…+k+(k+1)
=(1/6)k(k+1)(k+2)+1+2+3+…+k+(k+1)
=(1/6)k(k+1)(k+2)+1/2*(k+1)*(k+2)
=(1/6)(k+1)(k+2)(k+3)
=(1/6)(k+1)[(k+1)+1][(k+1)+2]
=右边
原式也成立!
综上可知,原式为真!

元素的移动次数与关键字的初始排列次序无关的是：基数排序

元素的比较次数与初始序列无关是：选择排序

算法的时间复杂度与初始序列无关的是：直接选择排序

关键在待排序的元素序列基本有序的前提下，效率最高的排序方法是 。

A．直接插入排序
B．选择排序
C．快速排序
D．归并排序

正确答案
A

答案解析
[解析] 本题考查各种排序方法，直接插入排序是将第i个元素插入到已经排序好的前i-1个元素中；选择排序是通过n-i次关键字的比较，从n-i+1个记录中选出关键字最小的记录，并和第i个记录交换，当i等于n时所有记录都已有序排列；快速排序是通过一趟排序将待排序的记录分割为独立的两部分，其中一部分记录的关键字均比另一部分记录的关键字小，然后再分别对这两部分记录继续进行排序，以达到整个序列有序；归并排序是把一个有n个记录的无序文件看成由n个长度为1的有序子文件组成的文件，然后进行两两归并，得到[n/2]个长度为2或l的有序文件，再两两归并，如此重复，直至最后形成包含n个记录的有序文件为止。
通过上面的分析，可知，在待排序元素有序的情况下，直接插入排序不再需要进行比较，而其他3种算法还要分别进行比较，所以效率最高为直接插入排序。

如何证明有n个点n-1条边的无向连通图一定是一颗树（即没有回环

因为是无向连通图，所以存在一棵生成树，它是这个无向连通图的子图，含有无向连通图的全部顶点（n个）以及n-1条边。换句话说。一个连通图的生成树就是该连通图擦掉若干条边后的一个子图。
上面是铺垫，下面用反证法证明：
证明：首先可知连通图必含生成树，下面证明只有n个顶点和n-1条边的连通图本身就是一棵树。
由于无向连通图本身只有n个顶点和n-1条边，又一定存在生成树，如果无向图本身不是一棵生成树（假设），那么它就需要擦去若干条边。由于擦去任意一条边后的图一定没有生成树，因为边的个数不足以拥有生成树这个子图（因为生成树至少需要n-1条边），说明该无向连通图没有生成树（本身不是，擦去后又不存在），这与无向连通图必有生成树矛盾，所以可知假设错误，该无向图本身一定是一棵生成树。

无向图变连通至少边数：n-1
有向图变连通图,至少需要边数：n
数学归纳法


所谓连通图一定是无向图,有向的叫做强连通图 连通n个顶点,至少只需要n-1条边就可以了,或者说就是生成树 由于无向图的每条边同时关联两个顶点,因此邻接矩阵中每条边被存储了两次（也就是说是对称矩阵）,因此至少有2(n-1)个非零元素

有n个顶点的强连通图最多有多少条边,最少有多少条边
 我来答
分享 举报 浏览 10437 次
3个回答 #热议# 袁隆平获未来科学大奖，他的成就究竟有多高？
最佳答案 oncforever 
来自科学教育类芝麻团 2015-08-20
有n个顶点的强连通图最多有n（n-1）条边，最少有n条边。

解释如下：
强连通图（Strongly Connected Graph）是指一个有向图（Directed Graph）中任意两点v1、v2间存在v1到v2的路径（path）及v2到v1的路径的图。

最多的情况：

即n个顶点中两两相连，若不计方向，n个点两两相连有n（n-1）/2条边，而由于强连通图是有向图，故每条边有两个方向，n（n-1）/2×2=n（n-1），故有n个顶点的强连通图最多有n（n-1）条边。

最少的情况：

即n个顶点围成一个圈，且圈上各边方向一致，即均为顺时针或者逆时针，此时有n条边。

某二叉树的前序序列和后序序列正好相反,则该二叉树一定是()的二叉树
空或只有一个结点
高度等于其结点数
任一结点无左孩子
任一结点无右孩子
查看正确选项
添加笔记
求解答(14)
邀请回答
收藏(227)
分享
纠错
10个回答 添加回答
8

Breeze Mao
一棵具有N个结点的二叉树的前序序列和后序序列正好相反 ，则该二叉树一定满足该二叉树只有左子树或只有右子树，即该二叉树一定是一条链（二叉树的高度为N，高度等于结点数）
发表于 2016-05-06 10:41:35回复(1)
Cookie1997 ：前序序列和后序序列正好相反，高度等于其结点数；
前序序列和中序序列正好相反，任一结点无右孩子；
中序序列和后序序列正好相反，任一结点无左孩子。
2018-05-11 01:08:56回复赞(4)

回复
5

StrongYoung
虽然，ACD都满足“二叉树的前序序列和后序序列正好相反”
但是题目问的是“一定”。
B其实是ACD的概括。
发表于 2015-09-30 19:47:28回复(0)
5

相信自己！
前序遍历和后序遍历相同，只有二叉树是一条链的情况下，一条链时，二叉树有下列特点：
1）任一结点无左孩子或者任一结点无右孩子
2）结点的个数等于树的高度
C和D表述不全面

共用体与结构体的区别
共用体： 
使用union 关键字 
共用体内存长度是内部最长的数据类型的长度。 
共用体的地址和内部各成员变量的地址都是同一个地址

结构体大小： 
结构体内部的成员，大小等于最后一个成员的偏移量+最后一个成员大小+末尾的填充字节数。 
结构体的偏移量：某一个成员的实际地址和结构体首地址之间的距离。 
结构体字节对齐：每个成员相对于结构体首地址的偏移量都得是当前成员所占内存大小的整数倍，如果不是会在成员前面加填充字节。结构体的大小是内部最宽的成员的整数倍。

共用体


#include <stdio.h>
//gcc让不同类型的变量共享内存地址 ,同一时间只有一个成员有效
union data{ 
    int a;
    char b;
    int c;
};


int main(){
    union data data_1 = {1};//初始化时只填写一个值。(同一时间只有一个成员有效)
    data_1.b = 'c';
    data_1.a = 10;//后赋值的才有效。前面的赋值被覆盖
    //打印地址，发现指向同一个地址
    printf("%p\n%p\n%p\n",&data_1.a,&data_1.a,&data_1.a);
    return 0;
}


可以是任意数值，但实际上编译系统会把这个表达式强制转成逻辑值，一般地false都为0；1或任何非零数值都是true，具体要看什么语言的。
判断题
1.if语句中的表达式不限于逻辑表达式，可以是任意的数值类型。【Y 】
2.switch语句可以用if语句完全代替。【Y 】
3.switch语句的case表达式必须是常量表达式。【 Y】
4.if语句，switch语句可以嵌套，而且嵌套的层数没有限制。【Y 】
5.条件表达式可以取代if语句，或者用if语句取代条件表达式。【N 】
6.switch语句的各个case和default的出现次序不影响执行结果。【N 】
7.多个case可以执行相同的程序段。【Y 】
8.内层break语句可以终止嵌套的switch，使最外层的switch结束。【 N】
9.switch语句的case分支可以使用{ }复合语句，多个语句序列。【Y 】
10.switch语句的表达式与case表达式的类型必须一致。【Y 】
11.在switch多分支中，break语句可使流程立即跳出switch语句体。【Y 】
12.if (a=<b) x++;是合法的C语句。【 N】
13.if必须有else与之配对。【N 】

若用STACK[n]表示某堆栈采用顺序存储结构，则下列关于堆栈及堆栈操作的叙述中正确的是（   ）。

堆栈的大小为n；
堆栈为空时n=0;
最多只能进行n次进栈和出栈操作；
n各元素依次进栈后，它们的出栈顺序与进栈顺序相反。


牛客4414733号
1，栈空时top=-1；
2，可以进行无限次进栈和出栈；
3，每个元素入栈后立马出栈，则出栈顺序与入栈顺序相同。
发表于 2017-11-30 21:37:15回复(0)

回复
更多回答
0

雅尔达winniebaby92
A
B 堆栈为空时n=-1
C 可以进行无限次进栈出栈
D 每个元素进栈后又立马出栈，就可以保证元素依次进栈，且进栈顺序与出栈一致

快速排序算法的递归深度
题目：对n个记录的线性表进行快速排序为减少算法的递归深度，以下叙述正确的是（）

A.每次分区后，先处理较短的部分

B.每次分区后，先处理较长的部分

C.与算法每次分区后的处理顺序无关

D.以上三者都不对



答案：A



解析：在快速排序中，需要使用递归来分别处理左子段和右子段，递归的深度可以理解为系统栈保存的深度，先处理短的分段再处理长的分段，可以减少时间复杂度。

如果按长的递归优先的话，那短的递归会一直保存在栈中，直到长的分段处理完成。短的优先的话，长的递归调用没有进行，它是作为一个整体保存在栈中的，所以递归栈中保留的递归数据会少一些。


对n个记录的线性表进行快速排序为减少算法的递归深度,以下叙述正确的是（ A ）［北方交通大学2000］
A.每次分区后,先处理较短的部分      
B.每次分区后，先处理较长的部分
C.与算法每次分区后的处理顺序无关 
D.以上三者都不对


10、采用递归方式对顺序表进行快速排序，下列关于递归次数的叙述中，正确的是（D  ）［2010计算机］
A、递归次数于初始数据的排列次数无关
B、每次划分后，先处理较长的分区可以减少递归次数
C、每次划分后，先处理较短的分区可以减少递归次数
D、递归次数与每次划分后得到的分区处理顺序无关

C语言中变量的地址是什么类型的

变量的地址，在C语言中，一般写作指针类型。
不同类型的变量地址，用不同的指针进行保存。
比如，char 类型的地址，使用char*保存，而int型地址，用int *保存。
除此外，部分情况下也会采用整型类型来保存变量地址，具体使用何种整型类型，取决于编译器：
1 16位编译器，地址占16位，2字节，可以使用short或者int保存。
2 32位编译器，地址占32位，4字节，可以使用int或long保存。
3 64位编译器，地址占64位，8字节，可以使用long保存。
不过不推荐使用整型类型保存地址，会带来移植上的不通用。

为实现快速排序算法，待排序序列宜采用的存储方式是链式存储
链式存储不适用于需要随机读取的算法（链表无法进行随机读取，只能从头读到尾），可以用顺序存储的方式

待排序记录序列是线性结构，可以用顺序存储结构和链式存储结构表示。 对于顺序存储结构进行排序时，是对序列中的记录本身进行物理重排（通过关键字之间的比较判断，将记录移动到合适的位置）。 而对以链表作为存储结构的序列进行排序时，无序移动记录，仅需修改指针。
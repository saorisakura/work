共用体与结构体的区别
共用体： 
使用union 关键字 
共用体内存长度是内部最长的数据类型的长度。 
共用体的地址和内部各成员变量的地址都是同一个地址

结构体大小： 
结构体内部的成员，大小等于最后一个成员的偏移量+最后一个成员大小+末尾的填充字节数。 
结构体的偏移量：某一个成员的实际地址和结构体首地址之间的距离。 
结构体字节对齐：每个成员相对于结构体首地址的偏移量都得是当前成员所占内存大小的整数倍，如果不是会在成员前面加填充字节。结构体的大小是内部最宽的成员的整数倍。

共用体
#include <stdio.h>
//gcc让不同类型的变量共享内存地址 ,同一时间只有一个成员有效
union data{ 
    int a;
    char b;
    int c;
};


int main(){
    union data data_1 = {1};//初始化时只填写一个值。(同一时间只有一个成员有效)
    data_1.b = 'c';
    data_1.a = 10;//后赋值的才有效。前面的赋值被覆盖
    //打印地址，发现指向同一个地址
    printf("%p\n%p\n%p\n",&data_1.a,&data_1.a,&data_1.a);
    return 0;
}


可以是任意数值，但实际上编译系统会把这个表达式强制转成逻辑值，一般地false都为0；1或任何非零数值都是true，具体要看什么语言的。
判断题
1.if语句中的表达式不限于逻辑表达式，可以是任意的数值类型。【Y 】
2.switch语句可以用if语句完全代替。【Y 】
3.switch语句的case表达式必须是常量表达式。【 Y】
4.if语句，switch语句可以嵌套，而且嵌套的层数没有限制。【Y 】
5.条件表达式可以取代if语句，或者用if语句取代条件表达式。【N 】
6.switch语句的各个case和default的出现次序不影响执行结果。【N 】
7.多个case可以执行相同的程序段。【Y 】
8.内层break语句可以终止嵌套的switch，使最外层的switch结束。【 N】
9.switch语句的case分支可以使用{ }复合语句，多个语句序列。【Y 】
10.switch语句的表达式与case表达式的类型必须一致。【Y 】
11.在switch多分支中，break语句可使流程立即跳出switch语句体。【Y 】
12.if (a=<b) x++;是合法的C语句。【 N】
13.if必须有else与之配对。【N 】

若用STACK[n]表示某堆栈采用顺序存储结构，则下列关于堆栈及堆栈操作的叙述中正确的是（   ）。

堆栈的大小为n；
堆栈为空时n=0;
最多只能进行n次进栈和出栈操作；
n各元素依次进栈后，它们的出栈顺序与进栈顺序相反。


牛客4414733号
1，栈空时top=-1；
2，可以进行无限次进栈和出栈；
3，每个元素入栈后立马出栈，则出栈顺序与入栈顺序相同。
发表于 2017-11-30 21:37:15回复(0)

回复
更多回答
0

雅尔达winniebaby92
A
B 堆栈为空时n=-1
C 可以进行无限次进栈出栈
D 每个元素进栈后又立马出栈，就可以保证元素依次进栈，且进栈顺序与出栈一致

快速排序算法的递归深度
题目：对n个记录的线性表进行快速排序为减少算法的递归深度，以下叙述正确的是（）

A.每次分区后，先处理较短的部分

B.每次分区后，先处理较长的部分

C.与算法每次分区后的处理顺序无关

D.以上三者都不对



答案：A



解析：在快速排序中，需要使用递归来分别处理左子段和右子段，递归的深度可以理解为系统栈保存的深度，先处理短的分段再处理长的分段，可以减少时间复杂度。

如果按长的递归优先的话，那短的递归会一直保存在栈中，直到长的分段处理完成。短的优先的话，长的递归调用没有进行，它是作为一个整体保存在栈中的，所以递归栈中保留的递归数据会少一些。


对n个记录的线性表进行快速排序为减少算法的递归深度,以下叙述正确的是（ A ）［北方交通大学2000］
A.每次分区后,先处理较短的部分      
B.每次分区后，先处理较长的部分
C.与算法每次分区后的处理顺序无关 
D.以上三者都不对


10、采用递归方式对顺序表进行快速排序，下列关于递归次数的叙述中，正确的是（D  ）［2010计算机］
A、递归次数于初始数据的排列次数无关
B、每次划分后，先处理较长的分区可以减少递归次数
C、每次划分后，先处理较短的分区可以减少递归次数
D、递归次数与每次划分后得到的分区处理顺序无关

C语言中变量的地址是什么类型的

变量的地址，在C语言中，一般写作指针类型。
不同类型的变量地址，用不同的指针进行保存。
比如，char 类型的地址，使用char*保存，而int型地址，用int *保存。
除此外，部分情况下也会采用整型类型来保存变量地址，具体使用何种整型类型，取决于编译器：
1 16位编译器，地址占16位，2字节，可以使用short或者int保存。
2 32位编译器，地址占32位，4字节，可以使用int或long保存。
3 64位编译器，地址占64位，8字节，可以使用long保存。
不过不推荐使用整型类型保存地址，会带来移植上的不通用。

为实现快速排序算法，待排序序列宜采用的存储方式是链式存储
链式存储不适用于需要随机读取的算法（链表无法进行随机读取，只能从头读到尾），可以用顺序存储的方式

待排序记录序列是线性结构，可以用顺序存储结构和链式存储结构表示。 对于顺序存储结构进行排序时，是对序列中的记录本身进行物理重排（通过关键字之间的比较判断，将记录移动到合适的位置）。 而对以链表作为存储结构的序列进行排序时，无序移动记录，仅需修改指针。
Redis的Python客户端redis-py

1. 安装
1. redis-py
        a. 使用easy_install
sudo easy_install redis

        b. 源码安装
git clone https://github.com/andymccurdy/redis-py.git
cd redis-py
python setup.py install

2. Parser安装
        Parser可以控制如何解析redis响应的内容。redis-py包含两个Parser类，PythonParser和HiredisParser。默认，如果已经安装了hiredis模块，redis-py会使用HiredisParser，否则会使用PythonParser。
HiredisParser是C编写的，由redis核心团队维护，性能要比PythonParser提高10倍以上，所以推荐使用。安装方法，使用easy_install：
easy_install hiredis
2. 使用
        redis-py提供两个类Redis和StrictRedis用于实现Redis的命令，StrictRedis用于实现大部分官方的命令，并使用官方的语法和命令（比如，SET命令对应与StrictRedis.set方法）。Redis是StrictRedis的子类，用于向后兼容旧版本的redis-py。
import redis
 
r = redis.StrictRedis(host='127.0.0.1', port=9212)
r.set('foo', 'hello')
r.rpush('mylist', 'one')
print r.get('foo')
print r.rpop('mylist')
        redis-py使用connection pool来管理对一个redis server的所有连接，避免每次建立、释放连接的开销。默认，每个Redis实例都会维护一个自己的连接池。可以直接建立一个连接池，然后作为参数Redis，这样就可以实现多个Redis实例共享一个连接池。
import redis
 
pool = redis.ConnectionPool(host='127.0.0.1', port=9212)
r = redis.Redis(connection_pool=pool)
r.set('one', 'first')
r.set('two', 'second')
print r.get('one')
print r.get('two')
        redis pipeline机制，可以在一次请求中执行多个命令，这样避免了多次的往返时延。
import redis
 
pool = redis.ConnectionPool(host='127.0.0.1', port=9212)
r = redis.Redis(connection_pool=pool)
pipe = r.pipeline()
pipe.set('one', 'first')
pipe.set('two', 'second')
pipe.execute()
 
pipe.set('one'. 'first').rpush('list', 'hello').rpush('list', 'world').execute()
        redis-py默认在一次pipeline中的操作是原子的，要改变这种方式，可以传入transaction=False，
pipe = r.pipeline(transaction=False)


[总结]redis连接超时问题排查

连接池无法获取到连接或获取连接超时
redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool
对于这类问题的原因有几类，可以根据以下一一进行排查

连接配置错误
Jedis连接池配置不可用，redis.host或redis.ip或redis.password 配置有误，手动检查配置是否都配置正确。

本地连接池连接数达到最大  
连接池中有配置最大连接数maxTotal，本地连接使用达到最大连接数maxTotal。在访问客户端上通过netstat -an | grep 6379 | grep EST | wc -l 查看客户端链接数目，如果接近maxTotal, 说明本地连接池资源已经有过耗尽或者正在耗尽。

服务端连接数达到最大
服务端连接数已经超过最大值maxclients，单机的maxclients默认是10000，可以通过redis-cli登录服务端，使用info 命令查看当前连接数。

 $redis-cli -h 10.1**.2.*0 -p 6379
10.1**.2.*0:6379> info clients
# Clients
connected_clients:1004
client_longest_output_list:0
client_biggest_input_buf:1
blocked_clients:0
10.1**.2.*0:6379>

当服务端连接数达到最大，可以通过命令client list，列出连接数，查看age=130222 idle=130222，这两值表示连接存活的时间和已经空闲的时间。
假如有IP的连接数过大，有可能是客户端连接使用不规范导致连接泄露。

网络问题
可以通过客户端工具redis-cli -h ${IP} -p ${port} -a ${pwd}，连接成功后，简单执行set mykey-i i, del mykey-i 命令，测试redis是否可用。

或者telnet host 6379进行连接，执行多次简单set del命令测试。


redis连接代码检查

获取JedisPool连接池中的jedis，使用jedis操作redis，每次getResource之后需要调用returnResource或者close进行归还，可以查看代码在使用完jedis之后是否returnResource，如果没有归还，则非常有可能产生连接泄露。

检查是否发生nf_conntrack丢包
通过dmesg检查客户端是否有异常

nf_conntrack: table full, dropping packet
 
如果发生nf_conntract丢包可以通过修改设置sysctl -w net.netfilter.nf_conntrack_max=120000

检查是否TIME_WAIT问题
通过ss -s 查看time wait链接是否过多

[root@localhost ~]# ss -s
Total: 314 (kernel 4877)
TCP:   32 (estab 3, closed 1, orphaned 0, synrecv 0, timewait 0/0), ports 0
 
 
Transport Total     IP        IPv6
*	  4877      -         -
RAW	  1         0         1
UDP	  2         1         1
TCP	  31        13        18
INET	  34        14        20
FRAG	  0         0         0
 

如果TIME_WAIT过多可以修改以下参数
sysctl -w net.ipv4.tcp_max_tw_buckets=180000
sysctl -w net.ipv4.tcp_tw_recycle=1
linux文件系统句柄数过小
设置redis同时可以与多少个客户端进行连接。默认情况下为10000个客户端。当你

无法设置进程文件句柄限制时，redis会设置为当前的文件句柄限制值减去32，因为redis会为自身内部处理逻辑留一些句柄出来。如果达到了此限制，redis则会拒绝新的连接请求，并且向这些连接请求方发出“max number of clients reached”以作回应。


抓包分析
如果按照上面排查之后还有问题可以通过抓包进行分析。

抓包命令为sudo tcpdump -i eth0 tcp and port 6379 -n -nn -s 74 -w redis.cap

       -s snaplen
       --snapshot-length=snaplen
              Snarf  snaplen  bytes  of  data from each packet rather than the default of 262144 bytes.  Packets truncated because of a limited snapshot are indicated in the output with ``[|proto]'', where
              proto is the name of the protocol level at which the truncation has occurred.  Note that taking larger snapshots both increases the amount of time it takes  to  process  packets  and,  effec‐
              tively, decreases the amount of packet buffering.  This may cause packets to be lost.  You should limit snaplen to the smallest number that will capture the protocol information you're inter‐
              ested in.  Setting snaplen to 0 sets it to the default of 262144, for backwards compatibility with recent older versions of tcpdump.

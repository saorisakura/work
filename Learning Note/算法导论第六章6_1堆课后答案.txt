算法导论第六章6.1堆课后答案

6.1-1在高度为h的堆中，元素个数最多和最少分别是多少？


最少是最底层只有一个叶子结点:2^0+2^1+...+2^(h-1)+1=2^h
最多是这个堆（包括最底层）是一个完全二叉树:2^0+2^1+...+2^(h-1)+2^h=2^(h+1)-1


6.1-2证明：含n个元素的堆的高度为lgn.


设这个堆的高度为h
这个堆的总结点2^0+2^1+...+2^(h-1)+O(2^h)=n  其中1<=O(2^h)<=2^h
所以1+2^h-1<=2^h-1+O(2^h)<=2^h-1+2^h   
    2^h<=n<=2^(h+1)-1<2^(h+1) 
    lgn-1<h<lgn
h=向下取整lgn


6.1-3证明：在最大堆的任意子树中，该子树所包含的最大元素在该子树的根结点上。


最大堆的任意子结点作为父结点，都要符合最大堆的性质所以第i个结点

A[PARENT(i)]>=A[i]



6.1-4假设最大堆的所有元素都不相同，那么该堆的最小元素应该位于哪里？


最小元素必然是在最底层或者是没有子结点的次底层。


6.1-5一个已排好序的数组是一个最小堆吗？


可能是最小堆也可能是最大堆。根据堆的定义：堆上的元素是从左向右填充。
如果最顶层根结点是数组中最小元素。那么按照堆的排序方式，满足最小堆的性质，就是最小堆
如果最顶层根结点是数组中最大元素。那么按照堆的排序方式，满足最大堆的性质，就是最大堆


6.1-6值为<23,17,14,6,13,10,1,5,7,12>的数组是一个最大堆吗？
其中6的子结点7是比6这个父结点要大，不满足最大堆的性质。


6.1-7证明：当用数组表示存储n个元素的堆时，叶结点下标分别是n/2+1,n/2+2,...n.


设堆高度为h.


当此堆第h层都被元素填满时，前h-1层最后一个元素是第2^0+2^1+..2^(h-1)=2^h-1
个，那么从最后一层开始才有叶子结点：2^h,2^h+1....2^h+2^h. 
2^0+2^1+...+2^h=n  =>h=lg(n+1)-1
所以第一个叶子结点2^h=2^(lg(n+1)-1) =(n+1)/2=n/2+1/2
所以叶子结点向下取整n/2+1,向下取整n/2+2,...n


当此堆第h层只有1个元素时，从第h-1层第二个元素开始都是叶子结点。第h-1层第二个元素下标
是2^0+2^1+...+2^(h-2)+2=2^(h-1)+1,那么从第h-1层第二个元素开始的叶子结点：
2^(h-1)+1,2^(h-1)+2....2^h. 
2^0+2^1+...+2^(h-1)+1=n  =>h=lgn
所以第一个叶子结点2^(h-1)+1=2^(lgn-1)+1=n/2+1
所以叶子结点向下取整n/2+1,向下取整n/2+2,...n

第六章堆排序之“优先级队列实现先进先出队列和栈”（练习6.5-6）
2012年01月03日 11:52:59 michealtx 阅读数：3177
这个不写代码了。

思路如下：

首先要先明确优先级是谁？优先级队列嘛，当然最重要的是要先知道“优先级”是谁，才能按它排序。

这里的优先级就是进出队的次序。

（1）优先级队列实现先进先出队列

先进队的优先级更高，赋予每个进队的元素一个优先级值，但优先级的值我们令0最大，1次之，2再次之，···，然后按着这个优先级值建立最大优先级队列，每次用HeapExtractMax（）取堆顶元素，这个肯定是更先进入队列的那个，这个即实现了先进先出队列。

（2）优先级队列实现先进后出的栈

先进队的优先级更低，赋予每个进队的元素一个优先级值，这里我们令0最小，1次之，2再次之，···，然后按这个优先级值建立最大优先级队列，每次用HeapExtractMax（）取第堆顶元素，这个肯定是更后进入队列的那个，即实现了先进后出的栈。


Exercises 6.5-1
Illustrate the operation of HEAP-EXTRACT-MAX on the heap A = [15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1].

Answer


Exercises 6.5-2
Illustrate the operation of MAX-HEAP-INSERT(A, 10) on the heap A = [15, 13, 9, 5, 12, 8, 7, 4, 0, 6, 2, 1]. Use the heap of Figure 6.5 as a model for the HEAP-INCREASE-KEY call.

Answer


Exercises 6.5-3
Write pseudocode for the procedures HEAP-MINIMUM, HEAP-EXTRACT-MIN, HEAP- DECREASE-KEY, and MIN-HEAP-INSERT that implement a min-priority queue with a min-heap.

Answer
My implementation on priority queue.

p_queue.h

p_queue.cpp

Exercises 6.5-4
Why do we bother setting the key of the inserted node to -∞ in line 2 of MAX-HEAP- INSERT when the next thing we do is increase its key to the desired value?

Answer
keey the HEAP-INCREASE-KEY condition still holds.

Exercises 6.5-5
Argue the correctness of HEAP-INCREASE-KEY using the following loop invariant:

• At the start of each iteration of the while loop of lines 4-6, the array A[1...heap- size[A]] satisfies the max-heap property, except that there may be one violation: A[i] may be larger than A[PARENT(i)].

Answer
obvious loop-invariant.

Exercises 6.5-6
Each exchange operation on line 5 of HEAP-INCREASE-KEY typically requires three asignments. Show how to use the idea of the inner loop of INSERTION-SORT to reduce the three assignments down to just one assignment.

Answer
HEAP-INCREASE-KEY(A, i, key):
	if key < A[i]
		error "New key is smaller than current key"
	A[i] = key
	while i > 1 and A[PARENT(i)] < key
		A[i] = A[PARENT(i)]
		i = PARENT(i)
	A[i] = key
Exercises 6.5-7
Show how to implement a first-in, first-out queue with a priority queue. Show how to implement a stack with a priority queue. (Queues and stacks are defined in Section 10.1.)

Answer
先进先出队列: 每次都给新插入的元素赋予更低的优先级即可.

栈：每次都给新插入的元素赋予更高的优先级.

First-in, first-out queue: Assign a lower priority to the newly inserted element.

stack：Assign a higher priority to the newly inserted element.

Exercises 6.5-8
The operation HEAP-DELETE(A, i) deletes the item in node i from heap A. Give an implementation of HEAP-DELETE that runs in O(lg n) time for an n-element max-heap.

Answer
HEAP-DELETE(A, i):
	if A[i] < A[A.heap-size]
		HEAP-INCREASE-KEY(A, i, A[A.heap-size])
		A.heap-size -= 1
	else
		A[i] = A[A.heap-size]
		A.heap-size -= 1
		MAX-HEAPIFY(A,i)
Notice: What's wrong with the implementation bellow?

HEAP-DELETE(A, i):
	A[i] = A[A.heap-size]
	A.heap-size -= 1
	MAX-HEAPIFY(A, i)
You can't assume there always be A[i] > A[A.heap-size]. For example:

      10
    /    \
   5      9
  / \    / \
 2   3  7   8
If you want to delete key 2, the A[A.heap-size] is 8. But 8 should climb up to the position of 5.

Exercises 6.5-9
Give an O(n lg k)-time algorithm to merge k sorted lists into one sorted list, where n is the total number of elements in all the input lists. (Hint: Use a min-heap for k-way merging.)

Answer
The problem occurs in leetcode

This is my solution


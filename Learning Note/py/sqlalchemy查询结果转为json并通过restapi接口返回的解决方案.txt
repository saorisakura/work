sqlalchemy查询结果转为json并通过restapi接口返回的解决方案
2018年05月24日 

python3.6， SqlAlchemy2.3.2

遇到的问题：

通过sqlalchemy查询的结果，如果直接通过jsonify函数转为json会报错：

TypeError: Object of type 'Comment' is not JSON serializable
网上有各种方案，例如增加一个AlchemyEncoder类来专门处理，但是本人试过都不行，以下方案才是正解：
1. 需要在模型类中增加to_json函数：

class Comment(db.Model):
    __tablename__ = 't_comment'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    content = db.Column(db.Text, nullable=False)
    create_time = db.Column(db.DateTime, nullable=False, default=datetime.now)
    author_id = db.Column(db.Integer, db.ForeignKey('t_user.id'))
    question_id = db.Column(db.Integer, db.ForeignKey('t_question.id'))
 
    author = db.relationship('User', backref=db.backref('comments'))
    question = db.relationship('Question', backref=db.backref('comments', order_by=create_time.desc()))
 
    def to_json(self):
        dict = self.__dict__
        if "_sa_instance_state" in dict:
            del dict["_sa_instance_state"]
        return dict
2. 将查询的结果，一次通过to_json方法放到数组中，在通过jsonify函数返回到前台：

# rest api接口，并将查询结果转化为json
@app.route('/comments', methods=['GET'])
def comments():
    comments = db.session.query(Comment).all()
    result = []
    for comment in comments:
        result.append(comment.to_json())
    return jsonify(result), 200


Sqlalchemy查询结果直接转json
Sqlalchemy是一款很好用的Python ORM 工具, 配合flask可以快速构建出Restful api，不过美中不足就是Sqlalchemy的查询结果不能直接通过jsonify函数直接转换。一种变通的办法就是通过在 在创建数据类的时候，就实现一个to_json的方法，代码如下:


class Article(Base):
    __tablename__ = 'article'
    id = Column(Integer, primary_key=True)
    title = Column(String(250), nullable=False)
    link = Column(String(255), nullable=True)
    cover = Column(String(255), nullable=False)
    nickname = Column(String(255), nullable=False)
    content = Column(Text(), nullable=False)

    def to_json(self):
        return {
                'id': self.id,
                'title': self.title,
                'link': self.link,
                'cover': self.cover,
                'nickname': self.nickname,
                'content' : self.content
                }

to_json方法返回一个字典类型，在最终生成json数据的时候，可以提前调用查询结果的类方法to_json拼接出任意需求的数据格式,将拼接后的结果数据传入到jsonify中。


res =  db.session.query(Article).all()
temp = []
for x in res:
    temp.append(x.to_json())

jsonify(objects = temp)
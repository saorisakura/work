Django+mysql配置与简单操作数据库实例代码

这篇文章主要介绍了Django+mysql配置与简单操作数据库实例,需要的朋友可以参考下

 第一步:下载mysql驱动

cmd进入创建好的django项目目录：使用命令

?
1
pip install mysqlclient
等待安装成功！

第二步:在settings.py中配置mysql连接参数（没有mysql的先装mysql）

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.mysql',
    'NAME': '数据库名(你得先在mysql中创建数据库)',
    'USER':'mysql用户名（如root）',
    'PASSWORD':'密码（如123456789）',
    'HOST':'域名（127.0.0.1或localhost）',
    'PORT':'端口号（3306）',
  }
}
第三步：在models.py中创建model类

from django.db import models
# Create your models here. 类似于MVC架构中的Model
class Article(models.Model):
  title = models.CharField(max_length=60,default='title')
  content = models.TextField(null=True)
第四步：根据model类创建数据库表

1、cmd进入django项目路径下

2、Python manage.py migrate #创建表结构，非model类的其他表，django所需要的

3、python manage.py makemigrations app名 #做数据迁移的准备

如：python manage.py makemigrations myblog myblog是我项目中的app名字

4、python manage.py migrate # 执行迁移，创建medel表结构

第五步：开始写代码吧

首先说下需求，就是在代码里向MySQL中插入一条记录并显示到页面

1、在templates下新建一个模板，其实就是页面，如index.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Title</title>
</head>
<body>
<h2> {{article.title}}</h2>
内容:{{ article.content }}
</body>
</html>
使用{{ }}在页面进行数据显示，这里看下就明白

2、配置URL

1、在项目下的urls.py（注意是项目下的urls.py）配置url映射：

from django.conf.urls import url,include
from django.contrib import admin
#根url配置
urlpatterns = [
  #url(页面正则,响应的方法名称)
  url(r'^admin/', admin.site.urls),
  url(r'^myblog/',include('myblog.urls')),
]
这里注意有一个include（'myblog.urls'）是我们接下来要配置的二级url,在app下的urls.py中配置

from django.conf.urls import url
from django.contrib import admin
from . import views
urlpatterns = [
  #url(页面正则,响应的方法名称) ^index$:表示要以index开始和结束，正则约束
  url(r'^index/$',views.index),
]
现在一个路径为'localhost:8000/myblog/index/'的访问路径就配好了，url(r'^index/$',views.index)就表示最终/myblog/index/这个路径由views.py中的index方法来响应。

3、写响应函数:如像数据中插入一个数据，并显示在页面上

from django.shortcuts import render
from django.http import HttpResponse
from myblog.models import Article
# Create your views here.
def index(request):
  article = Article(title='标题',content='内容！')
  article.save()
  return render(request,'index.html',{'article':article}
第六步：运行项目

我这里使用的pycharm，点击运行按钮即可，没有pycharm的可使用：

python manage.py runserver
来开启服务器，然后咋浏览器输入http://localhost:8000/myblog/index/, 打完收工！


Django模板遍历字典的方法
2015年02月26日
使用Python + Django做Web开发时，有时需要在view中传递一个字典给模板(template),如何在模板中遍历字典呢？

下面介绍两种方法：

    views.py代码如下：

    dicts = {"key1": 1, "key2": 2, "key3": 3, }  
    return render_to_response("index.html",{"dicts":dicts,},context_instance = RequestContext(request))  
1.第一种遍历方法：

 

   index.html代码如下：

{% for key,value in dicts.items %}  
  <tr class="{% cycle 'altrow' '' %}">              
    <td>{{ forloop.counter }}</td>            
    <td>{{ key }}</td>            
    <td>{{ value }}</td>            
  </tr>           
{% endfor %}

 这种方法遍历字典，简单明了，但由于字典是无序的，  不能满足特定的要求，如：首先输出key2,在输出key1，key3。要做到这点就需要使用第二种方法。



2. 第二种使用自定义过滤器

 

   1）:首先自定义过滤器：

      在Django的app包的合适位置创建一个templatetags包，它应该和models.py，
views.py等在同一级，例如:

     polls/  
       models.py  
       templatetags/  
       views.py  

    

      添加两个文件到templatetags包（即该目录下），一个__init__.py文件(来告诉Python这是一个包含Python代码的模块)和一个包含你的自定义的标签/过滤器定义的文件，后者的文件名是你将在后面用来载入标签的名字，例如，如果你的自定义标签或者过滤器在一个叫myfilter.py文件里，你可以在模板里做下面的事情:
     myfilter.py代码如下：

from django import template  
  
register = template.Library()  
  
def key(d,key_name):      
    value = 0      
    try:          
      value = d[key_name]      
   except KeyError:          
      value = 0      
   return value

模板index.html代码如下：

<tr class="altrow">           
  <td>1</td>              
  <td>key2</td>           
  <td>{{ dicts|key:"key2" }}  
  </td>           
</tr>         
<tr>            
  <td>2</td>              
  <td>key1</td>           
  <td>{{ dicts|key:"key1" }}  
  </td>                   
</tr>         
<tr class="altrow">             
  <td>3</td>              
  <td>key3</td>           
  <td>{{ dicts|key:"key3" }}</td>          

  

Django中的数据记录的增、删、改、查
2015年06月26日 20:31:07
Django中数据的增删改查操作如下：

我们以一个model：User为例，User有三个字段，一个是username、passwd、phonenumber

（1）增加一条记录

添加一个username、passwd、phonenumber字段值为s_username、s_passwd、s_phonenumber的记录

user=User()

user.username=s_username

user.passwd=s_passwd

user.phonenumber=s_phonenumber

user.save()

或

user=User(username=s_username,passwd=s_passwd,phonenumber=s_phonenumber)

user.save()

(2)删除记录

删除一条username为‘yy’的记录

User.objects.get(username='yy').delete()

删除一组记录，假设一个电话号码可以对应多个user，现在要删除电话号码为‘123456’的所有用户

User.objects.filter(phonenumber='123456').delete()

(3)修改记录

把username为‘dw’的记录的手机号修改为‘88888’

user=User.objects.get(username='dw')

user.phonenumber='88888'

user.save()

(4)查询记录

查询用username为‘dw’的记录

user=User.objects.get(username='dw'),用get查询出来的记录是一个User对象

查询phonenumber为‘88888’的所有用户

user=User.objects.filter(phonenumber='88888') 用filter查询的结果得到的是一个列表

Django对数据库进行添加与更新
2018年06月07日 09:03:58
先把models.py摆这儿

#models.py
class UserProfile(AbstractUser):
    '''
    继承Django的AbstractUser 并向里面添加两条数据内容怀疑
    '''
    gender = models.CharField(max_length=6,choices=(('male','男'),('female','女')),default='female',verbose_name='性别')
    memo = models.TextField(null=True, blank=True,verbose_name='便签')
    class Meta:
        verbose_name = '用户信息'
        verbose_name_plural = verbose_name #指定模型的复数形式是什么,如果不指定Django会自动在模型名称后加一个’s’
 
class UserTodo(models.Model):
    created_time = models.DateTimeField(default=datetime.now(),verbose_name='创建时间')
    user_id = models.ForeignKey(UserProfile,on_delete=models.C    ASCADE)  #设置外键，关联到UserProfile表
    # models.CASCADE表示若删除某一用户，则该用户下的所有UserTodo也会被删除
    ToDolist = models.CharField(max_length=255,verbose_name='todo')
    done = models.BooleanField(default=False,verbose_name='完成状态')
    class Meta:
        verbose_name = '用户自增信息'
        verbose_name_plural = verbose_name
一、将数据保存到数据库中（在views.py中）
完成model后，在Terminal运行python manage.py makemigrations 生成数据库。然后可以进行保存操作

对于没有没有外键的数据库：
from .models import UserProfile
from django.contrib.auth.hashers import make_password
user_profile = UserProfile()
user_profile.username = username
user_profile.email = email
user_profile.password = make_password(password) #make_password是django自带的给password重新编码技术，存储在数据库中
user_profile.is_active = True #判断用户是否激活
user_profile.save()
有外键的数据库
1、首先应先获取关联的数据库的信息，如果为用户则为用的在数据库中的ID

user_id = UserProfile.objects.get(username=request.user) #request.user表示当前登陆的用户名称，后台实际上是用户名
2、保存到数据库中
user_todo = UserTodo(ToDolist=todo,done=done,user_id=user_id,created_time=datetime.now()) 保存到数据库中时按照用户名所在的id进行保存
user_todo.save()
二、对数据库进行更新及查询的操作
动机是当用户点击网页上的X号是对数据库中的done进行更新，更新为True。

一开始想着按照id进行更新，但是当用户多了以后id与网页上显示的id肯定不相同。

经过我的苦苦思索，每个用户中创建todo的时间肯定不相同，因此可以依据created_time可以进行搜索，来对done进行更新。

说干就干！

1、先查询我们想要的那一条数据
用户的todo显示在网页上时是按照created_time进行了排序，因此在更新的时候也按照created_time进行排序，这样子便不会出错。

user_id = UserProfile.objects.get(username=request.user) #获取当前登陆用户的todo id（按照后台的打印实际上为用户名）
todo_query = UserTodo.objects.filter(user_email=user_id, done=False) #按照user_id、done进行对数据库的筛选
#在UserTodo表中找出user_id以及该用户下done=False的数据
#todo_query的类型为<class 'django.db.models.query.QuerySet'>
todo_query = todo_query.order_by("created_time")  # 按照截至日期按照从小到大的顺序进行筛选，若要从大到小排序则("-created_time")
现在的结果是我们已经得到了该用户名下的所有done=False的数据，并且已经完成了排序

接下来就是找到我们想要的那一条数据

todo_dict = todo_query.values("created_time") #经过values，得到created_time的那一列数据
类型依旧为QuerySet，但只有一种数据，即全部是created_time的数据，这时就可以提取我们想要的数据了

time_dict[3]['created_time'] #QuerySet中第四个名称为created_time的数据（序号从0开始，因此3是第四个）3为网页上元素的索引
打印print(time_dict[3]['created_time'])的结果为：2018-06-07 01:45:10.938825+00:00
到此已经完成数据的查询。

2、对数据进行更新
已经是小菜一碟了hiahiahia。。。

按照上述查询到的created_time，来找出当前用户下符合这一个cteated_time 的记录（肯定只有一条）

time_index = time_dict[id]['created_time'] #id为从前端传过来的网页上元素的id
User = UserTodo.objects.get(user_id=user_id,created_time=time_index)
User.done = True
User.save()
Done！
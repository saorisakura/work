2018年“数据结构与C语言程序设计”考试内容包括“数据结构”与“C语言程序设计”两门课程的内容，各占比例50%。试卷满分为150分。

“数据结构”部分

一、概述

1．数据的逻辑结构与存储结构的基本概念；

2．算法的定义、基本性质以及算法分析的基本概念，包括采用大O形式表示时间复杂度和空间复杂度。

二、线性表

1．线性关系、线性表的定义，线性表的基本操作；

2．线性表的顺序存储结构与链式存储结构(包括单(向)链表、循环链表和双向链表)的构造原理；

3．在以上两种存储结构的基础上对线性表实施的基本操作，包括顺序表的插入与删除、链表的建立、插入与删除、查找等操作对应的算法设计(含递归算法的设计)。

三、堆栈与队列

1．堆栈与队列的基本概念与基本操作；

2．堆栈与队列的顺序存储结构与链式存储结构的构造原理；

3．在不同存储结构的基础上对堆栈与队列实施插入与删除等基本操作的算法设计；

4．堆栈和队列在解决实际问题中应用。

四、树与二叉树

1．树与二叉树的基本概念，基本特征、名词术语；

2．完全二叉树与满二叉树的基本概念，二叉树的基本性质及其应用；

3．二叉树的顺序存储结构与二叉链表存储结的基本原理；

4．二叉树的前序遍历、中序遍历、后序遍历和按层次遍历，重点是二叉树在以二叉链表作为存储结构基础上各种遍历算法(包括非递归算法)的设计与应用；

5．二叉排序树的基本概念、建立(插入)、查找以及平均查找长度ASL的计算。

五、图

1．图的基本概念、名词术语；

2．图的邻接矩阵存储方法和邻接表(含逆邻接表)存储方法的构造原理及特点；

3．图的深度优先搜索与广度优先搜索；

4．最小(代价)生成树、最短路径、AOV网与拓扑排序的基本概念。

六、文件及查找

1．顺序查找法以及平均查找长度(ASL)的计算；

2．折半查找法以及平均查找长度(ASL)的计算，包括查找过程对应的“判定树”的构造；

3．B-树和B+树的基本概念；

4．散列(Hash)表的构造、散列函数的构造，散列冲突的基本概念、处理散列冲突的基本方法以及散列表的查找和平均查找长度的计算。

七、内排序

1．排序的基本概念，各种内排序方法的基本原理和特点，包括排序过程中进行的元素之间的比较次数，排序总趟数、排序稳定性以及时间复杂度与空间复杂度计算；

2．插入排序法(含折半插入排序法)；

3．选择排序法；

4．(起)泡排序法；

5．谢尔(Shell)排序法；

6．快速排序法；

7．堆积(Heap)排序法，包括堆积的定义与构造；

“C语言程序设计”部分

一、C语言基本知识

1．C语言的特点以及C语言程序的组成；

2．数据类型，包括整型、实型、字符型等常量与变量和变量的赋值；用typedef定义类型；

3．各种类型数据之间的混合运算；

4．算术表达式、关系表达式和逻辑表达式，表达式sizeof的含义。

二、基本语句

1．赋值语句（含条件赋值语句）、条件语句（含if、if-else、switch）、循环语句（含while、do-while、for语句，包括循环嵌套和break语句与continue语句）；

2．输入/输出语句，包括整型、实型、字符型（含字符串）等类型数据的格式输入函数scanf和格式输出函数printf。
	printf格式输出总结

	#include<stdio.h>   
	#include<string.h>   
	int main()   
	{   
		char c, s[20];   
		int a=1234;  
		float f=3.141592653589;   
		double x=0.12345678912345678;   
		strcpy(s, "Hello,World");   
		c='\x41';   
		printf("a=%d\n", a);//按照十进制整数格式输出，显示 a=1234  
		printf("a=%d%%\n", a);//输出%号 结果 a=1234%  
		printf("a=%6d\n", a);//输出6位十进制整数 左边补空格，显示 a= 1234  
		printf("a=%06d\n", a);//输出6位十进制整数 左边补0，显示 a=001234  
		printf("a=%2d\n", a);//a超过2位，按实际输出 a=1234  
		printf("a=%-6d\n", a);///输出6位十进制整数 右边补空格，显示 a=1234  
		printf("f=%f\n", f);//浮点数有效数字是7位，结果 f=3.141593  
		printf("f=6.4f\n", f);//输出6列，小数点后4位，结果 f=3.1416  
		printf("x=%lf\n", x);//输出长浮点数 x=0.123457  
		printf("x=%18.16lf\n", x);//输出18列，小数点后16位，x=0.1234567891234567  
		printf("c=%c\n", c);     //输出字符 c=A  
		printf("c=%x\n", c);//以十六进制输出字符的ASCII码 c=41  
		printf("s[]=%s\n", s);//输出数组字符串s[]=Hello,World  
		printf("s[]=%6.9s\n", s);//输出最多9个字符的字符串 s[]=Hello,Wor  
		return 0;  
	}

三、数组

1．一维数组和二维数组的定义、引用与初始化；

2．字符数组的定义、引用与初始化，字符数组的输入与输出，字符串和字符串处理函数的应用。

四、函数

1．函数的定义，函数参数（形参和实参）与函数的返回值；

2．函数的调用，包括函数的嵌套调用和函数的递归调用；

3．命令行参数的基本概念，带参数的主函数的概念和应用。

五、指针

1．指针的基本概念，包括定义、使用、指针变量作为函数参数和函数返回值以及函数指针；

2．数组与指针，包括指向数组的指针变量的定义与赋值、通过指针引用数组元素、数组名作为函数参数；

3．字符串与指针，指向字符串的指针变量。

六、预处理指令

1．预处理指令的基本概念，文件包含和条件包含预处理指令；

2．宏替换，带参数的宏。

七、结构体与共用体

1．结构体的基本概念和特点，结构体变量的初始化与引用，结构体指针的使用；

2．结构体数组，包括结构体数组的定义、初始化及应用；

3．共用体的基本概念，共用体变量的引用。

八、位运算

1．位运算和位运算符；

2．位运算的应用。

	C语言位运算符及作用：与、或、异或、取反、左移和右移
	一、& 按位与

	如果两个相应的二进制位都为1，则该位的结果值为1，否则为0
	应用：
	（1）清零
	若想对一个存储单元清零，即使其全部二进制位为0，只要找一个二进制数，其中各个位符合一下条件：
	原来的数中为1的位，新数中相应位为0。然后使二者进行&运算，即可达到清零目的。
	a 00101011
	b 10010100
	c 00000000 //c = a & b

	（2）取一个数中某些指定位
	若有一个整数a(2byte),想要取其中的低字节，只需要将a与8个1按位与即可。
	a 00101100 10101100
	b 00000000 11111111
	c 00000000 10101100 //c = a & b

	（3）保留指定位：
	a 01010100
	b 00111011
	c 00010000 //c = a & b

	二、| 按位或
	两个相应的二进制位中只要有一个为1，该位的结果值为1。借用逻辑学中或运算的话来说就是，一真为真
	应用：将一个数据的某些位定值为1
	a 00110000
	b 00001111
	c 00111111 //c = a | b

	三、^ 按位异或
	若参加运算的两个二进制位值相同则为0，否则为1
	应用：不用临时变量，交换两个值

	计算前：
	a＝3，即011（2）；b＝4，即100（2）

	计算过程：
	a＝a ^ b; //即111 = 011 ^ 100
	b＝b ^ a; //即011 = 100 ^ 111
	a＝a ^ b; //即100 = 111 ^ 011

	计算后：
	a＝100（2）即 4 ；b = 011（2）即 3；

	四、~ 取反 
	~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1变0

	五、<< 左移
	用来将一个数的各二进制位全部左移N位，右补0

	六、>> 右移
	将一个数的各二进制位右移N位，移到右端的低位被舍弃，对于无符号数，高位补0

	七、原码, 反码, 补码的基础概念和计算方法
	在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念《杂谝桓鍪? 计算机要使用一定的编码方式进行存储。原码, 反码, 补码是机器存储一个具体数字的编码方式.

	（1）原码
	原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值.

	比如如果是8位二进制:

	[+1]原 = 0000 0001
	[-1]原 = 1000 0001

	第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:
	[1111 1111 , 0111 1111] 即 [-127 , 127]

	原码是人脑最容易理解和计算的表示方式。

	（2）反码
	反码的表示方法是:

	正数的反码是其本身
	负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.

	[+1] = [00000001]原 = [00000001]反
	[-1] = [10000001]原 = [11111110]反

	可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.

	（3）补码
	补码的表示方法是:

	正数的补码就是其本身
	负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)

	[+1] = [00000001]原 = [00000001]反 = [00000001]补
	[-1] = [10000001]原 = [11111110]反 = [11111111]补

	对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.

	补码举例：16位的变量求补码,比如-266的补码求法：( ( 266 ^ 0xffff ) + 1 ) 结果是0xfef6

九、文件

1．文件的基本概念，包括文件类型指针FILE与文件的使用方式；

2．文件的打开函数fopen与关闭函数fclose；

3．文件的状态，包括feof函数和ferror函数；

4．文件的读/写，包括fread和fwrite函数、fputc和fgetc函数、fgets与fputs函数的应用；

5．文件的输入函数fscanf和输出函数fprintf的应用；

6．文件的定位，包括rewind函数和fseek函数以及ftell函数的应用。
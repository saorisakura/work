tarball install
If, for some reason, pip won’t work, you can manually download the APScheduler distribution from PyPI, extract and then install it:

$ python setup.py install

Python 实现定时任务
循环 sleep
这种方式最简单，在循环里面放入要执行的任务，然后 sleep 一段时间再执行

from datetime import datetime
import time
# 每n秒执行一次
def timer(n):
    while True:
        print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        time.sleep(n)
# 5s
timer(5)
这个方法的缺点是，只能执行固定间隔时间的任务，如果有定时任务就无法完成，比如早上六点半喊我起床。并且 sleep 是一个阻塞函数，也就是说 sleep 这一段时间，啥都不能做。

threading模块中的Timer
threading 模块中的 Timer 是一个非阻塞函数，比 sleep 稍好一点，不过依然无法喊我起床。

from datetime import datetime
from threading import Timer
# 打印时间函数
def printTime(inc):
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    t = Timer(inc, printTime, (inc,))
    t.start()
# 5s
printTime(5)
Timer 函数第一个参数是时间间隔（单位是秒），第二个参数是要调用的函数名，第三个参数是调用函数的参数(tuple)

使用sched模块
sched 模块是 Python 内置的模块，它是一个调度（延时处理机制），每次想要定时执行某任务都必须写入一个调度。

import sched
import time
from datetime import datetime
# 初始化sched模块的 scheduler 类
# 第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。
schedule = sched.scheduler(time.time, time.sleep)
# 被周期性调度触发的函数
def printTime(inc):
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    schedule.enter(inc, 0, printTime, (inc,))
# 默认参数60s
def main(inc=60):
    # enter四个参数分别为：间隔事件、优先级（用于同时间到达的两个事件同时执行时定序）、被调用触发的函数，
    # 给该触发函数的参数（tuple形式）
    schedule.enter(0, 0, printTime, (inc,))
    schedule.run()
# 10s 输出一次
main(10)
sched 使用步骤如下：

（1）生成调度器：
s = sched.scheduler(time.time,time.sleep)
第一个参数是一个可以返回时间戳的函数，第二个参数可以在定时未到达之前阻塞。

（2）加入调度事件
其实有 enter、enterabs 等等，我们以 enter 为例子。
s.enter(x1,x2,x3,x4)
四个参数分别为：间隔事件、优先级（用于同时间到达的两个事件同时执行时定序）、被调用触发的函数，给触发函数的参数（注意：一定要以 tuple 给，如果只有一个参数就(xx,)）

（3）运行
s.run()
注意 sched 模块不是循环的，一次调度被执行后就 Over 了，如果想再执行，请再次 enter

APScheduler定时框架
终于找到了可以每天定时喊我起床的方式了

APScheduler是一个 Python 定时任务框架，使用起来十分方便。提供了基于日期、固定时间间隔以及 crontab 类型的任务，并且可以持久化任务、并以 daemon 方式运行应用。

使用 APScheduler 需要安装

1
$ pip install apscheduler
首先来看一个周一到周五每天早上6点半喊我起床的例子

from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import datetime
# 输出时间
def job():
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
# BlockingScheduler
scheduler = BlockingScheduler()
scheduler.add_job(job, 'cron', day_of_week='1-5', hour=6, minute=30)
scheduler.start()
代码中的 BlockingScheduler 是什么呢？

BlockingScheduler 是 APScheduler 中的调度器，APScheduler 中有两种常用的调度器，BlockingScheduler 和 BackgroundScheduler，当调度器是应用中唯一要运行的任务时，使用 BlockingSchedule，如果希望调度器在后台执行，使用 BackgroundScheduler。

BlockingScheduler: use when the scheduler is the only thing running in your process
BackgroundScheduler: use when you’re not using any of the frameworks below, and want the scheduler to run in the background inside your application
AsyncIOScheduler: use if your application uses the asyncio module
GeventScheduler: use if your application uses gevent
TornadoScheduler: use if you’re building a Tornado application
TwistedScheduler: use if you’re building a Twisted application
QtScheduler: use if you’re building a Qt application
APScheduler四个组件
APScheduler 四个组件分别为：触发器(trigger)，作业存储(job store)，执行器(executor)，调度器(scheduler)。

触发器(trigger)
包含调度逻辑，每一个作业有它自己的触发器，用于决定接下来哪一个作业会运行。除了他们自己初始配置意外，触发器完全是无状态的
APScheduler 有三种内建的 trigger:

date: 特定的时间点触发
interval: 固定时间间隔触发
cron: 在特定时间周期性地触发

作业存储(job store)
存储被调度的作业，默认的作业存储是简单地把作业保存在内存中，其他的作业存储是将作业保存在数据库中。一个作业的数据讲在保存在持久化作业存储时被序列化，并在加载时被反序列化。调度器不能分享同一个作业存储。
APScheduler 默认使用 MemoryJobStore，可以修改使用 DB 存储方案

执行器(executor)
处理作业的运行，他们通常通过在作业中提交制定的可调用对象到一个线程或者进城池来进行。当作业完成时，执行器将会通知调度器。
最常用的 executor 有两种：

ProcessPoolExecutor
ThreadPoolExecutor

调度器(scheduler)
通常在应用中只有一个调度器，应用的开发者通常不会直接处理作业存储、调度器和触发器，相反，调度器提供了处理这些的合适的接口。配置作业存储和执行器可以在调度器中完成，例如添加、修改和移除作业。

配置调度器
APScheduler提供了许多不同的方式来配置调度器，你可以使用一个配置字典或者作为参数关键字的方式传入。你也可以先创建调度器，再配置和添加作业，这样你可以在不同的环境中得到更大的灵活性。

下面来看一个简单的 BlockingScheduler 例子

from apscheduler.schedulers.blocking import BlockingScheduler
from datetime import datetime

def job():
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
# 定义BlockingScheduler
sched = BlockingScheduler()
sched.add_job(job, 'interval', seconds=5)
sched.start()
上述代码创建了一个 BlockingScheduler，并使用默认内存存储和默认执行器。(默认选项分别是 MemoryJobStore 和 ThreadPoolExecutor，其中线程池的最大线程数为10)。配置完成后使用 start() 方法来启动。

如果想要显式设置 job store(使用mongo存储)和 executor 可以这样写：

from datetime import datetime
from pymongo import MongoClient
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from apscheduler.jobstores.mongodb import MongoDBJobStore
from apscheduler.executors.pool import ThreadPoolExecutor, ProcessPoolExecutor
# MongoDB 参数
host = '127.0.0.1'
port = 27017
client = MongoClient(host, port)
# 输出时间
def job():
    print(datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
# 存储方式
jobstores = {
    'mongo': MongoDBJobStore(collection='job', database='test', client=client),
    'default': MemoryJobStore()
}
executors = {
    'default': ThreadPoolExecutor(10),
    'processpool': ProcessPoolExecutor(3)
}
job_defaults = {
    'coalesce': False,
    'max_instances': 3
}
scheduler = BlockingScheduler(jobstores=jobstores, executors=executors, job_defaults=job_defaults)
scheduler.add_job(job, 'interval', seconds=5, jobstore='mongo')
scheduler.start()
在运行程序5秒后，第一次输出时间。
在 MongoDB 中可以看到 job 的状态

job

对 job 的操作
添加 job
添加job有两种方式：

add_job()
scheduled_job()
第二种方法只适用于应用运行期间不会改变的 job，而第一种方法返回一个apscheduler.job.Job 的实例，可以用来改变或者移除 job。

from apscheduler.schedulers.blocking import BlockingScheduler
sched = BlockingScheduler()
# 装饰器
@sched.scheduled_job('interval', id='my_job_id', seconds=5)
def job_function():
    print("Hello World")
# 开始
sched.start()
@sched.scheduled_job() 是 Python 的装饰器。

移除 job
移除 job 也有两种方法：

remove_job()
job.remove()
remove_job 使用 jobID 移除
job.remove() 使用 add_job() 返回的实例

job = scheduler.add_job(myfunc, 'interval', minutes=2)
job.remove()
# id
scheduler.add_job(myfunc, 'interval', minutes=2, id='my_job_id')
scheduler.remove_job('my_job_id')
暂停和恢复 job
暂停一个 job：

apscheduler.job.Job.pause()
apscheduler.schedulers.base.BaseScheduler.pause_job()
恢复一个 job：

apscheduler.job.Job.resume()
apscheduler.schedulers.base.BaseScheduler.resume_job()
希望你还记得 apscheduler.job.Job 是 add_job() 返回的实例

获取 job 列表
获得可调度 job 列表，可以使用get_jobs() 来完成，它会返回所有的 job 实例。

也可以使用print_jobs() 来输出所有格式化的 job 列表。

修改 job
除了 jobID 之外 job 的所有属性都可以修改，使用 apscheduler.job.Job.modify() 或者 modify_job() 修改一个 job 的属性

job.modify(max_instances=6, name='Alternate name')
modify_job('my_job_id', trigger='cron', minute='*/5')
关闭 job
默认情况下调度器会等待所有的 job 完成后，关闭所有的调度器和作业存储。将 wait 选项设置为 False 可以立即关闭。


scheduler.shutdown()
scheduler.shutdown(wait=False)
scheduler 事件
scheduler 可以添加事件监听器，并在特殊的时间触发。


def my_listener(event):
    if event.exception:
        print('The job crashed :(')
    else:
        print('The job worked :)')
# 添加监听器
scheduler.add_listener(my_listener, EVENT_JOB_EXECUTED | EVENT_JOB_ERROR)
trigger 规则
date
最基本的一种调度，作业只会执行一次。它的参数如下：

run_date (datetime|str) – the date/time to run the job at
timezone (datetime.tzinfo|str) – time zone for run_date if it doesn’t have one already

from datetime import date
from apscheduler.schedulers.blocking import BlockingScheduler
sched = BlockingScheduler()
def my_job(text):
    print(text)
# The job will be executed on November 6th, 2009
sched.add_job(my_job, 'date', run_date=date(2009, 11, 6), args=['text'])
sched.add_job(my_job, 'date', run_date=datetime(2009, 11, 6, 16, 30, 5), args=['text'])
sched.add_job(my_job, 'date', run_date='2009-11-06 16:30:05', args=['text'])
# The 'date' trigger and datetime.now() as run_date are implicit
sched.add_job(my_job, args=['text'])
sched.start()
cron
year (int|str) – 4-digit year
month (int|str) – month (1-12)
day (int|str) – day of the (1-31)
week (int|str) – ISO week (1-53)
day_of_week (int|str) – number or name of weekday (0-6 or mon,tue,wed,thu,fri,sat,sun)
hour (int|str) – hour (0-23)
minute (int|str) – minute (0-59)
second (int|str) – second (0-59)
start_date (datetime|str) – earliest possible date/time to trigger on (inclusive)
end_date (datetime|str) – latest possible date/time to trigger on (inclusive)
timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations (defaults to scheduler timezone)
表达式:

python 定时任务


from apscheduler.schedulers.blocking import BlockingScheduler

def job_function():
    print("Hello World")
# BlockingScheduler
sched = BlockingScheduler()
# Schedules job_function to be run on the third Friday
# of June, July, August, November and December at 00:00, 01:00, 02:00 and 03:00
sched.add_job(job_function, 'cron', month='6-8,11-12', day='3rd fri', hour='0-3')
# Runs from Monday to Friday at 5:30 (am) until 2014-05-30 00:00:00
sched.add_job(job_function, 'cron', day_of_week='mon-fri', hour=5, minute=30, end_date='2014-05-30')
sched.start()
interval
参数：

weeks (int) – number of weeks to wait
days (int) – number of days to wait
hours (int) – number of hours to wait
minutes (int) – number of minutes to wait
seconds (int) – number of seconds to wait
start_date (datetime|str) – starting point for the interval calculation
end_date (datetime|str) – latest possible date/time to trigger on
timezone (datetime.tzinfo|str) – time zone to use for the date/time calculations

from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler

def job_function():
    print("Hello World")
# BlockingScheduler
sched = BlockingScheduler()
# Schedule job_function to be called every two hours
sched.add_job(job_function, 'interval', hours=2)
# The same as before, but starts on 2010-10-10 at 9:30 and stops on 2014-06-15 at 11:00
sched.add_job(job_function, 'interval', hours=2, start_date='2010-10-10 09:30:00', end_date='2014-06-15 11:00:00')
sched.start()
PythonPython


为什么使用 APScheduler
无他, 只因 Python 标准库里面的 sched 模块不太好用而已, 而且抽象层级不高. 接口设计得也不是很优雅, 徒增心智负担. ( 其实 Python 的很多标准库都不好用, 接口很不优雅 )

我们希望在一种更高的抽象层次完成我们的调度意图, 所以就需要封装, 把心智负担都封装隐藏起来.

任务的几种触发机制
触发机制, 不如说是「触发规则」. 根据我们有限的人生阅历来看, 可以分为如下几类:

在未来某个特定的时间点执行, 所谓点状
以一种有规律的间隔机制, 循环下去( 可以添加end_time ), 所谓线状
cron job. 这是 Linux/Unix 中的概念, 最为复杂最为强大, 前两种分类, 理论上不过是它的子分类
但是第 1 和第 2 种分类单独拎出来, 是有意义的, 因为它们在现实生活中的占比很大.

下面说说 APScheduler 进行封装后所泛化出来的接口.

首先是各种 Scheduler, 可以将它们理解为一种容器, 不断地往里面喂 Job 就行了.

然后是 Job , 我理解为一种比较上层的抽象概念, 即要做一件什么样的事

最后是一些其他概念, 如 Executor, Trigger, JobStore, 不过我觉得都不难理解, 也不是最为核心的概念, 不赘述.

APScheduler 的最佳实践
版本要选对, 越新越好
肯定选 3. 我们公司的版本是 2.0.1, 最近做好几个有类似场景的需求, 2 的源码都翻了好几遍, 总结就是: 经被坑成傻逼了. ( BTW, 公司使用的是被淘汰的 Python2.6, 我反正是各种不幸福, 想跑路了 :P )

一些很必要的操作接口, 2 都没有, 所以往往需要以一种很扭曲的方式, 来实现你的逻辑, 像吃 shit 一样.

一般步骤( 套路 )
这个官方文档都有讲, 但是文档又长又臭又冗长, 我反正是阅读了好几遍. 官网的 Github 仓库倒是有几个 demo, 但是太过简洁, 而且还藏了好几个坑( 后文说明 )

其实套路也就那样, 有什么复杂的呢 ? 我希望借这一段讲清楚套路, 如果能节省别人的看文档时间, 也算是积了功德心, 所以这一段在本文中最为重要.

不妨先抛开一切, 让我们来想一想: 如果我要在未来 10 小时内( 假设现在是 1:00:00 ), 每隔 1 小时发送一封邮件出去, 我应该怎么做.

首先, 调度器得有一个, 总管家一样的, 我们的心腹, 得力干将.

然后, 调度什么呢, 肯定是 Job 啊, 上文讲述的那种抽象概念, 其实你怎么理解都可以, 只要意思是哪个意思就可以了.

最后, 我们的规则怎么抽象? 其实大部分需求所抽象出的规则, 都可以落在上文讲述的 3 中规则上的某一个( 除非你想在未来的随机时间段内的随机时间点做一件事情, 那我们只能手动再见了 :P )

执行器, 任务存储在哪, 都是不太重要的问题.

我们再来看看, 在 APScheduler 中怎么有机组合我们上面的想法, 不多说了, Show the code.

#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# date: 2017/3/1
# author: he.zhiming

from __future__ import absolute_import, unicode_literals
import time
import random
from datetime import datetime
from datetime import timedelta
# 我们的调度器( 以Tornado为蓝本 ), 另外 APScheduler提供了集中调度器( 其实都大同小异 )
from apscheduler.schedulers.tornado import TornadoScheduler
# 我们的触发器(触发规则)
from apscheduler.triggers.interval import IntervalTrigger
import tornado.ioloop

# 这里忽略, 我个人习惯使用日志来代替print, 另外不太习惯于使用 pdb 单步调试
import logging
LOG_FMT = "%(levelname)s %(asctime)s  %(processName)s %(threadName)s %(filename)s:%(lineno)s:%(funcName)s [%(message)s]"
logging.basicConfig(format=LOG_FMT, level=logging.DEBUG)
mylogger = logging.getLogger(__name__)
mylogger.setLevel(logging.DEBUG)

# 要做一件什么事情( 可以替换为你需要做的其他任何事情 )
def testfunc(a, b, c):
    print('DOING: %s' % locals())

if __name__ == '__main__':
    # OK, 调度器有了
    sched = TornadoScheduler()
    for _ in range(30):
        # 往调度器里面喂 Job 了
        sched.add_job(
            func=testfunc,          # 被调度的函数
            args=(1, 2, 3),         # 被调度函数所需要的参数

            trigger=IntervalTrigger( # 触发规则, 推荐这种我个人总结的写法, 不要用官方示例的那种
                # 开始时间
                start_date=datetime.now() + timedelta(seconds=random.randint(1, 5)), 
                # 结束时间
                end_date=datetime.now() + timedelta(seconds=random.randint(5, 10)),
                # 每隔多少时间
                seconds=random.randint(1, 5)
            ),
            
            name='testfunc',        # 这个 Job, 起个别名
        )
       
    # 调度器启动
    sched.start()

    # Tornado开启 IOLoop, 本例中我们也是使用 TornadoScheduler
    # 其实官方还提供了各种各样的调度器
    # 但是都大同小异, 只要掌握了套路, 便可不变因万变
    try:
        tornado.ioloop.IOLoop.current().start()
    except (KeyboardInterrupt, SystemExit) as e:
        sched.shutdown()
资源良心推荐
官方 Github 仓库中的 demos ( 记住不要随便去撸源码, 伤身体, 至少先要把 demo 过一遍啊 )
官方文档
官方 Github 仓库的 issues
没有必要各种 Google 搜各种博客了, 把 1, 2, 3 过一遍, 对 APScheduler 的掌握就是「手中无剑, 而心中有剑」的程度了 :P

为什么不用 APScheduler
原因太简单了.

假如你每天有好几万个(甚至更多)的定时任务, 而你还在用 APScheduler 吭哧吭哧地解决时, 别人早已经用上 异步队列(如RabbitMQ)了, 并且成功地提前下班和妹子约会去了. 只能说, 你是块加班的料 :P

APScheduler 是一把瑞士军刀, 所以注意其使用局限性( 不要提标准库的 sched, 它充其量不过是一块刀片而已, 相信我, 用刀片大部分时候都得不到幸福感 )

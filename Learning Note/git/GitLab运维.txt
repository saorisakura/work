Problem
	Unicorn does not come up (error 502) after hard restart 

	docker exec -it gitlab rm /home/git/gitlab/tmp/pids/unicorn.pid && docker restart gitlab
	This solved my issue, thanks :-)

	 @fover0932
	 
	fover0932 commented on 2 Jun 2018
	docker exec -it gitlab rm /home/git/gitlab/tmp/pids/unicorn.pid && docker restart gitlab

	This solved my issue, thanks :-)

	-----me too, thanks!!!


Command line instructions

Git global setup
git config --global user.name "Administrator"
git config --global user.email "admin@example.com"

Create a new repository
git clone http://gitlab.example.com/erotic/mini_video.git
cd mini_video
touch README.md
git add README.md
git commit -m "add README"
git push -u origin master

Existing folder
cd existing_folder
git init
git remote add origin http://gitlab.example.com/erotic/mini_video.git
git add .
git commit -m "Initial commit"
git push -u origin master

Existing Git repository
cd existing_repo
git remote rename origin old-origin
git remote add origin http://gitlab.example.com/erotic/mini_video.git
git push -u origin --all
git push -u origin --tags

GitLab基本运维操作

安装完gitlab后的运维操作

初次配置服务

sudo gitlab-ctl reconfigure

启动服务

sudo gitlab-ctl start

停止服务

sudo gitlab-ctl stop

重启服务

sudo gitlab-ctl restart

检查服务的日志信息

检查redis的日志

sudo gitlab-ctl tail redis

检查postgresql的日志

sudo gitlab-ctl tail postgresql

检查gitlab-workhorse的日志

sudo gitlab-ctl tail gitlab-workhorse

检查logrotate的日志

sudo gitlab-ctl tail logrotate

检查nginx的日志

sudo gitlab-ctl tail nginx

检查sidekiq的日志

sudo gitlab-ctl tail sidekiq

检查unicorn的日志

sudo gitlab-ctl tail unicorn 　　

检查服务状态

sudo gitlab-ctl status

一般服务状态显示信息

显示格式：

状态 ： 进程名称：（进程ID）运行时间（秒）；进程的日志服务进程和运行时间

run: gitlab-workhorse: (pid 4752) 10759s; run: log: (pid 1077) 13185s
run: logrotate: (pid 12616) 3557s; run: log: (pid 1079) 13185s
run: nginx: (pid 4764) 10758s; run: log: (pid 1076) 13185s
run: postgresql: (pid 4770) 10757s; run: log: (pid 1073) 13185s
run: redis: (pid 4778) 10757s; run: log: (pid 1072) 13185s
run: sidekiq: (pid 4782) 10756s; run: log: (pid 1075) 13185s
run: unicorn: (pid 4786) 10756s; run: log: (pid 1074) 13185s

状态   说明

run    运行状态
down   服务停止

常见的问题

页面显示500，Whoops， something went wrong on our end.
500

Whoops, something went wrong on our end.

Try refreshing the page, or going back and attempting the action again.

Please contact your GitLab administrator if this problem persists.

如何检查和定位问题？

使用命令检查所有服务的状态

sudo gitlab-ctl status

检查服务状态如下

run: gitlab-workhorse: (pid 4752) 10862s; run: log: (pid 1077) 13288s
run: logrotate: (pid 16553) 59s; run: log: (pid 1079) 13288s
run: nginx: (pid 4764) 10861s; run: log: (pid 1076) 13288s
run: postgresql: (pid 4770) 10860s; run: log: (pid 1073) 13288s
run: redis: (pid 4778) 10860s; run: log: (pid 1072) 13288s
run: sidekiq: (pid 4782) 10859s; run: log: (pid 1075) 13288s
run: unicorn: (pid 4786) 10859s; run: log: (pid 1074) 13288s

定位问题

从服务状态信息中显示数据库postgresql的状态是down，即服务停止。

检查数据库postgresql的运行日志，检查出现什么错误？

$ sudo gitlab-ctl tail postgresql
==> /var/log/gitlab/postgresql/state <==

==> /var/log/gitlab/postgresql/current <==
2017-12-21_02:49:51.42192 FATAL: terminating connection due to administrator command
2017-12-21_02:49:51.42194 FATAL: terminating connection due to administrator command
2017-12-21_02:49:51.42194 LOG: autovacuum launcher shutting down
2017-12-21_02:49:51.42287 FATAL: terminating connection due to administrator command
2017-12-21_02:49:51.42289 FATAL: terminating connection due to administrator command
2017-12-21_02:49:51.42463 LOG: shutting down
2017-12-21_02:49:51.59345 LOG: database system is shut down
2017-12-21_02:50:43.38811 LOG: database system was shut down at 2017-12-21 02:49:51 GMT
2017-12-21_02:50:43.41991 LOG: database system is ready to accept connections
2017-12-21_02:50:43.42055 LOG: autovacuum launcher started

日志显示，数据库的访问权限应该是只有用户本身有读写执行的权限，用户组和其他用户不能有权限。

修改数据库数据的权限后，检查服务运行正常。

了解了问题的定位和解决方式，其他问题也很容易在日志中发现和解决，问题可能是磁盘空间少，用户权限错误或者其他原因。

gitlab管理员密码忘记，怎么重置密码
Gitlab 修改root用户密码

使用rails工具打开终端

sudo gitlab-rails console production

查询用户的email，用户名，密码等信息，id:1 表示root账号

user = User.where(id: 1).first

重新设置密码

user.password = ‘新密码‘
user.password_confirmation = ‘新密码‘　

保存密码

user.save!

完整的操作ruby脚本

user = User.where(id: 1).first
user.password = ‘新密码‘
user.password_confirmation = ‘新密码‘
user.save!

然后使用重置过的密码重新登录。

git 客户端下载地址：https://git-scm.com/download/win
Linux有关的可以直接yum 安装或者apt-get 安装

Centos: yum install git

Ubuntu： apt-get install git


Gitlab运维
安装Gitlab
新建 /etc/yum.repos.d/gitlab-ce.repo

[gitlab-ce]
name=gitlab-ce
baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7
repo_gpgcheck=0
gpgcheck=0
enabled=1
gpgkey=https://packages.gitlab.com/gpg.key
 
//再执行
yum makecache
yum install gitlab-ce
 
注意：这里是使用清华大学的yum源，最新yum源可在www.gitlab.cc查看说明文档
启动GitLab

gitlab-ctl reconfigure
使用浏览器访问GitLab

首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.
默认的管理员账号是root,如果你想更改默认管理员账号,
请输入上面设置的新密码登录系统后修改帐号名.
查看GitLab服务状态，列出了所有组件的运行状态

# gitlab-ctl status
run: gitlab-workhorse: (pid 868) 1345s; run: log: (pid 861) 1345s
run: logrotate: (pid 867) 1345s; run: log: (pid 860) 1345s
run: nginx: (pid 866) 1345s; run: log: (pid 859) 1345s
run: postgresql: (pid 858) 1345s; run: log: (pid 857) 1345s
run: redis: (pid 864) 1345s; run: log: (pid 863) 1345s
run: sidekiq: (pid 856) 1345s; run: log: (pid 855) 1345s
run: unicorn: (pid 865) 1345s; run: log: (pid 862) 1345s
重启GitLab

重启所有组件
# gitlab-ctl restart
ok: run: gitlab-workhorse: (pid 3996) 1s
ok: run: logrotate: (pid 4002) 0s
ok: run: nginx: (pid 4009) 0s
ok: run: postgresql: (pid 4016) 1s
ok: run: redis: (pid 4025) 0s
ok: run: sidekiq: (pid 4030) 0s
ok: run: unicorn: (pid 4035) 0s
 
重启某一个组件，如nginx
# gitlab-ctl restart nginx
ok: run: nginx: (pid 4181) 0s
 
有时候，组件超时启动期间，有时他们会被卡住。 在这种情况下，我们可以使用
# gitlab-ctl kill <service>
然后重新启动服务
作为最后的手段，你可以尝试重新配置GitLab代替：
# gitlab-ctl reconfigure
配置域名，修改nginx配置文件

cd  /var/opt/gitlab/nginx/conf
vim gitlab-http.conf
...
server_name gitlab.heboan.com;   #修改42行
...
 
重启nginx
gitlab-ctl restart nginx
  
修改hosts或DNS解析
访问gitlab.heboan.com
打开`/etc/gitlab/gitlab.rb`,将`external_url = 'http://git.example.com'`修改为自己的IP地址：`http://xxx.xx.xxx.xx`,，
然后执行下面的命令，对GitLab进行编译
gitlab-ctl reconfigure

Gitlab备份
使用Gitlab一键安装包安装Gitlab非常简单, 同样的备份恢复与迁移也非常简单. 使用一条命令即可创建完整的Gitlab备份:

gitlab-rake gitlab:backup:create
使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为1393513186_gitlab_backup.tar的压缩包, 这个压缩包就是Gitlab整个的完整部分, 其中开头的1393513186是备份创建的日期

Gitlab 修改备份文件默认目录

你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录:
gitlab_rails['backup_path'] = '/mnt/backups'
 
/mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可
Gitlab 自动备份

加入以下, 实现每天凌晨2点进行一次自动备份:
0 2 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create
Gitlab 恢复

# 停止相关数据连接服务
gitlab-ctl stop unicorn
gitlab-ctl stop sidekiq
 
# 从1393513186编号备份中恢复
gitlab-rake gitlab:backup:restore BACKUP=1393513186
 
# 启动Gitlab
sudo gitlab-ctl start
Gitlab迁移
迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份
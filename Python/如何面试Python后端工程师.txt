如何面试Python后端工程师


一.语言
1.推荐一本看过最好的python书籍？ 拉开话题好扯淡 
2.谈谈python的装饰器，迭代器，yield？ 
3.标准库线程安全的队列是哪一个？collections.deque|Queue  不安全的是哪一个？logging是线程安全的吗？ yes
4.python适合的场景有哪些？当遇到计算密集型任务怎么办？ 
5.python高并发解决方案？我希望听到twisted->tornado->gevent，能扯到golang,erlang更好

二.操作系统
可以直接认为是linux，毕竟搞后端的多数是和linux打交道。 
1.tcp/udp的区别？tcp粘包是怎么回事，如何处理？udp有粘包吗？ 
2.time_wait是什么情况？出现过多的close_wait可能是什么原因？ 
3.epoll,select的区别？边缘触发，水平触发区别？

三.存储
存储可能包含rdbms，nosql以及缓存等，我以mysql,redis举例 
mysql相关 
1.谈谈mysql字符集和排序规则？ 
2.varchar与char的区别是什么？大小限制？utf8字符集下varchar最多能存多少个字符 
3.primary key和unique的区别？ 
4.外键有什么用，是否该用外键？外键一定需要索引吗？ 
5.myisam与innodb的区别？innodb的两阶段锁定协议是什么情况？ 
6.索引有什么用，大致原理是什么？设计索引有什么注意点？ 
redis相关 
1.什么场景用redis，为什么mysql不适合？ 
2.谈谈redis的事务？用事务模拟原子+1操作？原子操作还有其它解决方案吗？ 
3.redis内存满了会怎么样？

四.安全
web安全相关 
1.sql注入是怎么产生的，如何防止？ 
2.xss如何预防？htmlescape后能否避免xss? 
3.csrf是什么？django是如何防范的？

密码技术
1.什么是分组加密？加密模式有哪些？ecb和cbc模式有什么区别？为什么需要iv向量？ 
2.简单说说https的过程？ 
3.对称加密与非对称加密区别？ 
3.如何生成共享秘钥？ 如何防范中间人攻击？

五.杂
是否关注新技术啊？golang，rust是否了解？numpy,pandas是啥鸟？ 
是否紧跟时代潮流？逛不逛微博，刷不刷知乎？

可能你觉得我问的好细，但这好多都是平常经常遇到，并需要解决的，细节更能体现一个人。

如果你觉得小kiss，欢迎投简历给我yihaibo@longtugame.com，龙图游戏运营支持中心数据分析部招人；觉得有点问题，那还等什么，赶快来和我交流交流。

更新:讨论区挺热闹，有人说好简单，有人说好难，其实我觉得这只适合面试2~3年工作经验的后端工程师。真的没有问 
很难的题目，只是可能你平时没有注意。 
在这里我推荐几本书吧 
python参考手册，绝对让你更上一层楼 
图解密码技术，密码入门不二之选 
mysql技术内幕第五版，有点厚当手册读读，要有耐心，高性能mysql也强烈建议读读 
effective tcp/ip programming

为什么评论区有这么大差异？我想是个人经历不一样吧，如果是搞web的对操作系统这块和密码技术会偏弱，但如果是系统工程师或是游戏服务端这块会明显偏强。

六.后记
最近我也面试了不少童鞋，我发现能达到要求的真的少之又少，很多hr都说Python是最难招聘的岗位，我想是有道理的，这真的很值得我们去深思？

我想有一部分原因是Python这门语言造成的，会写Python的人很多，但写的好的人很少，大部分都把Python当做脚本来写，缺乏面向对象，模式的思想。想想Java，大家都习惯了接口，实现分离，设计模式在Java中也喊了很多年，尤其是ssh三大框架一出，用着用着就理所当然的认为就该这么做，虽然也有点坏处，但对企业级Java开发无疑是一大进步。

反观Python，尤其是生成器，协程，元类给Python注入了很大的灵活性，想写的Pythonic有不小难度，但其实Python高级特性就那么几个，干掉了也就没有了。

当你觉得Python遇到了瓶颈，不妨停下来好好想想。研究研究设计模式，想想重构，了解领域驱动设计，敏捷开发，再回来读读以前写的代码，当眼界变高了，代码也就美了。

当然思想的提高不是一朝一夕，模式，原则会经常让你纠结，纠结就会思索，思考就走出了自己的路，当然条条大路通罗马。

数据库等存储技术是研发工程师迈不过的坎，对关系数据库以mysql举例来说，你必须清楚的知道什么字段选择什么类型，类型字节大小，限制条件，这东西也很容易理解，多想想即可，比如set类型，要支持交并等操作，1个字节只能存8个类别。数据类型搞定了，下面就是索引了，mysql索引种类？主键，唯一索引，普通索引。索引类别，BTree索引，hash索引。索引的优缺点，mysql的索引查找原理，join原理(大部分都是nested loop)，以及一些特殊的情况，比如mysql子查询慢等。其实到这里研发工程师就差不多，当然你可以继续深入下去，比如读写分离，集群管理，甚至一些参数调优。

革命尚未成功，同志任需努力！！！！


考点：_num标注着人事管理系统中的总人数，增加一人计数加一，删除一人计数减一

	class Person(object):
		_num = 0

		def __init__(self):
			Person._num += 1

		@classmethod
		def sum(cls):
			return cls._num

		def __del__(self):
			Person._num -= 1


	class Staff(Person):
		_id_num = 0

		def __init__(self):
			super(Staff, self).__init__()


	class Student(Person):
		_id_num = 0

		def __init__(self):
			super(Student, self).__init__()


	if __name__ == '__main__':
		stu1 = Student()
		stu2 = Student()
		stu3 = Student()
		staff1 = Staff()
		staff2 = Staff()
		print(staff2.sum())
		del stu1
		print(staff2.sum())
